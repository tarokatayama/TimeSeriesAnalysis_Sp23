plot(ARIMA_forecast)
autoplot(ts_inflow_full)+
autolayer(for_and_seasonality, series = "ARIMA forecast + seasonality")+
ylab("Inflow m^{3}/s")+
xlab("Date")+
labs(col="Model")
print(SARIMA_autofit)
SARIMA_autofit <- auto.arima(inflow_ts)
print(SARIMA_autofit)
SARIMA_forecast <- forecast(object = SARIMA_autofit, h = 12)
plot(SARIMA_forecast)
autoplot(inflow_ts)+
autolayer(SARIMA_forecast,series="SARIMA")
autoplot(inflow_ts)+
autolayer(SARIMA_forecast,series="SARIMA", PI=FALSE)
autoplot(ts_inflow_full)+
autolayer(SARIMA_forecast,series="SARIMA", PI=FALSE)
autoplot(ts_inflow_full)+
autolayer(SARIMA_forecast,series="SARIMA", PI=FALSE)+
ylab("Inflow m^{3}/s")+
xlab("Date")+
labs(col="Model")
autoplot(ts_inflow_full)+
autolayer(SARIMA_forecast,series="SARIMA Forecast", PI=FALSE)+
ylab("Inflow m^{3}/s")+
xlab("Date")+
labs(col="Model")
autoplot(ts_inflow_full)+
autolayer(for_and_seasonality, series = "ARIMA forecast + seasonality")+
autolayer(SARIMA_forecast,series="SARIMA Forecast", PI=FALSE)+
ylab("Inflow m^{3}/s")+
xlab("Date")+
labs(col="Model")
SES_seas_fit <- ses(y = inflow_ts, h = 12, holdout = FALSE, silent = FALSE)
summary(SES_seas_fit)
plot(SES_seas_fit)
ts_plot_full<- ggplot(inflow_processed_full, aes(x=Date, y=monthly_inflow))+
labs(y="Monthly Inflow m^{3}/s")+
geom_line()+theme_bw()
ts_plot_full
autoplot(ts_inflow_full)+
autolayer(for_and_seasonality, series = "ARIMA Forecast + seasonality")+
autolayer(SARIMA_forecast,series="SARIMA Forecast", PI=FALSE)+
autolayer(SES_seas_fit, series="Exponential Smoothing", PI=FALSE)+
ylab("Inflow m^{3}/s")+
xlab("Date")+
labs(col="Model")
autoplot(deseasonal_inflow_full)+
autolayer(ARIMA_forecast,series="ARIMA", PI=FALSE)+
ylab("Inflow m^{3}/s")+
xlab("Date")+
labs(col="Model")
autoplot(ts_inflow_full)+
autolayer(for_and_seasonality, series = "ARIMA Forecast + seasonality")+
ylab("Inflow m^{3}/s")+
xlab("Date")+
labs(col="Model")
autoplot(ts_inflow_full)+
autolayer(SARIMA_forecast,series="SARIMA Forecast", PI=FALSE)+
ylab("Inflow m^{3}/s")+
xlab("Date")+
labs(col="Model")
autoplot(ts_inflow_full)+
autolayer(for_and_seasonality, series = "ARIMA Forecast + seasonality")+
autolayer(SARIMA_forecast,series="SARIMA Forecast", PI=FALSE)+
ylab("Inflow m^{3}/s")+
xlab("Date")+
labs(col="Model")
autoplot(ts_inflow_full)+
autolayer(for_and_seasonality, series = "ARIMA Forecast + seasonality")+
autolayer(SARIMA_forecast,series="SARIMA Forecast", PI=FALSE)+
autolayer(SES_seas_fit, series="Exponential Smoothing", PI=FALSE)+
ylab("Inflow m^{3}/s")+
xlab("Date")+
labs(col="Model")
forecast_values_df<- data.frame(ARIMA_SEAS=as.matrix(for_and_seasonality))
View(forecast_values_df)
forecast_values_df<- data.frame(Observed=as.matrix(ts_inflow_2010),ARIMA_SEAS=as.matrix(for_and_seasonality))
View(forecast_values_df)
ts_inflow_full[1:4]
forecast_values_df<- data.frame(Observed=as.matrix(ts_inflow_full[120:132]),ARIMA_SEAS=as.matrix(for_and_seasonality))
ts_inflow_full[120:132]
ts_inflow_2010<- ts_inflow_2010[120:132]
ts_inflow_2010<- ts_inflow_full[120:132]
ts_inflow_2010<- ts_inflow_full[121:132]
ts_inflow_full
observed_2010<- ts_inflow_full[121:132]
forecast_values_df<- data.frame(Observed=observed_2010,ARIMA_SEAS=as.matrix(for_and_seasonality))
View(forecast_values_df)
View(SARIMA_forecast)
View(SARIMA_forecast)
forecast_values_df<- data.frame(Observed=observed_2010,
ARIMA_SEAS=as.matrix(for_and_seasonality),
SARIMA_forecast$series)
View(forecast_values_df)
forecast_values_df<- data.frame(Observed=observed_2010,
ARIMA_SEAS=as.matrix(for_and_seasonality),
SARIMA_forecast$fitted)
View(forecast_values_df)
forecast_values_df<- data.frame(Observed=observed_2010,
ARIMA_SEAS=as.matrix(for_and_seasonality),
SARIMA=SARIMA_forecast$fitted)
View(SES_seas_fit)
plot(SES_seas_fit)
plot(SES_seas_fit$fitted)
plot(SES_seas_fit)
library(lubridate)
library(ggplot2)
library(forecast)
library(Kendall)
library(tseries)
library(outliers)
library(tidyverse)
#install.packages("smooth")
library(smooth)
#Importing time series data from text file#
electricity_price <- read.csv(file="./Data/Average_retail_price_of_electricity_United_States_monthly.csv",header=TRUE,skip=4)
#Inspect data
head(electricity_price)
nvar <- ncol(electricity_price) - 1
nobs <- nrow(electricity_price)
#Preparing the data - create date object and rename columns
electricity_price_processed <-
electricity_price %>%
mutate( Month = my(Month) ) %>%
rename( All.sectors = all.sectors.cents.per.kilowatthour ) %>%
rename( Residential = residential.cents.per.kilowatthour ) %>%
rename( Commercial = commercial.cents.per.kilowatthour ) %>%
rename( Industrial = industrial.cents.per.kilowatthour ) %>%
arrange( Month )
head(electricity_price_processed)
summary(electricity_price_processed)
#No NAs so we don't need to worry about missing values
ts_electricity_price <- ts(electricity_price_processed[,2:(nvar+1)],
start=c(year(electricity_price_processed$Month[1]),month(electricity_price_processed$Month[1])),
frequency=12)
#note that we are only transforming columns with electricity price, not the date columns
head(ts_electricity_price,15)
tail(ts_electricity_price,15)
TS_Plot <-
ggplot(electricity_price_processed, aes(x=Month, y=All.sectors)) +
geom_line()
plot(TS_Plot)
#ACF and PACF plots
par(mfrow=c(1,2))
ACF_Plot <- Acf(electricity_price_processed$All.sectors, lag = 40, plot = TRUE)
PACF_Plot <- Pacf(electricity_price_processed$All.sectors, lag = 40)
par(mfrow=c(1,1))
#Using R decompose function
decompose_allsectors_price <- decompose(ts_electricity_price[,"All.sectors"],"additive")
plot(decompose_allsectors_price)
#The ACF plot show a slow decay which is a sign of non-stationarity.
#Creating non-seasonal residential price time series because some models can't handle seasonality
deseasonal_allsectors_price <- seasadj(decompose_allsectors_price)
#Model 1: Arithmetic mean on original data
MEAN_seas <- meanf(y = ts_electricity_price[,"All.sectors"], h = 36)
plot(MEAN_seas)
#Model 2: Arithmetic mean on deseas data
MEAN_deseas <- meanf(deseasonal_allsectors_price, h=36)
plot(MEAN_deseas)
#Model 3: Seasonal naive on original data
SNAIVE_seas <- snaive(ts_electricity_price[,"All.sectors"], h=36)
plot(SNAIVE_seas)
#Model 4: Naive on deseas data
NAIVE_deseas <- naive(deseasonal_allsectors_price, h=36)
plot(NAIVE_deseas)
# Model 5: Simple moving average on deseasonal data
SMA_deseas_fit <- smooth::sma(y = deseasonal_allsectors_price, h = 36, holdout = FALSE, silent = FALSE) #,order=2)
summary(SMA_deseas_fit)
plot(SES_seas_fit)
plot(ts_electricity_price[,"All.sectors"],col="black")
lines(SES_seas_fit$fitted, col="blue")
plot(ts_electricity_price[,"All.sectors"],col="black")
lines(SES_seas_fit$fitted, col="blue")
# Model 5: Simple moving average on deseasonal data
SMA_deseas_fit <- smooth::sma(y = deseasonal_allsectors_price, h = 36, holdout = FALSE, silent = FALSE) #,order=2)
summary(SMA_deseas_fit)
library(lubridate)
library(ggplot2)
library(forecast)
library(Kendall)
library(tseries)
#library(outliers)
library(tidyverse)
library(smooth)
#install.packages("ggfortify")
#library(ggfortify)
inflowdata<- read.table(file="./Data/inflowtimeseries.txt", sep = '\t', stringsAsFactors = TRUE)
inflow_data<- separate(inflowdata, col="V1", int=c('Date', 'V'), sep = ' ')
inflow_processed<- inflow_data%>%
mutate( Date = my(paste0(Date, "-", V)))%>%
rename(monthly_inflow = V15)%>%
select(Date, monthly_inflow)%>%
filter(between(Date, as.Date('2000-01-01'), as.Date('2009-12-01')))
inflow_processed_full<- inflow_data%>%
mutate( Date = my(paste0(Date, "-", V)))%>%
rename(monthly_inflow = V15)%>%
select(Date, monthly_inflow)%>%
filter(between(Date, as.Date('2000-01-01'), as.Date('2010-12-01')))
inflow_ts<-ts(inflow_processed[,2],
start = c(year(inflow_processed$Date[1]), month(inflow_processed$Date[1])),
frequency = 12)
ts_plot<- ggplot(inflow_processed, aes(x=Date, y=monthly_inflow))+
labs(y="Monthly Inflow m^{3}/s")+
geom_line()+theme_bw()
plot(ts_plot)
par(mfrow=c(1,2))
ACF_Plot <- Acf(inflow_processed$monthly_inflow, lag = 40, main = "ACF", plot = TRUE)
PACF_Plot <- Pacf(inflow_processed$monthly_inflow, lag = 40, main= "PACF")
decompose_inflow<- decompose(inflow_ts, "additive")
plot(decompose_inflow)
deseasonal_inflow<- seasadj(decompose_inflow)
df<- data.frame(inflow_processed, deseasonal=as.matrix(deseasonal_inflow))
df_longer<- df%>%
pivot_longer(!Date, names_to = "inflow", values_to = "value")
ggplot(df_longer) +
geom_line(aes(x=Date, y=value, color=inflow))+
labs(y="Monthly Inflow m^{3}/s")
par(mfrow=c(1,2))
Acf(deseasonal_inflow, lag = 40)
Pacf(deseasonal_inflow, lag = 40)
par(mfrow=c(1,1))
non_seas_ARIMA<- auto.arima(deseasonal_inflow, max.D = 0, max.P = 0, max.Q = 0)
print(non_seas_ARIMA)
ARIMA_forecast<- forecast(object = non_seas_ARIMA, h=12)
plot(ARIMA_forecast)
ts_inflow_full<- ts(inflow_processed_full[,2], start = c(2000,01), frequency = 12)
decompose_inflow_full<- decompose(ts_inflow_full, "additive")
deseasonal_inflow_full<- seasadj(decompose_inflow_full)
autoplot(deseasonal_inflow_full)+
autolayer(ARIMA_forecast,series="ARIMA", PI=FALSE)+
ylab("Inflow m^{3}/s")+
xlab("Date")+
labs(col="Model")
seasonality<- decompose_inflow$seasonal[1:12]
for_and_seasonality<- ARIMA_forecast$mean + seasonality
autoplot(ts_inflow_full)+
autolayer(for_and_seasonality, series = "ARIMA Forecast + seasonality")+
ylab("Inflow m^{3}/s")+
xlab("Date")+
labs(col="Model")
SARIMA_autofit <- auto.arima(inflow_ts)
print(SARIMA_autofit)
SARIMA_forecast <- forecast(object = SARIMA_autofit, h = 12)
plot(SARIMA_forecast)
autoplot(ts_inflow_full)+
autolayer(SARIMA_forecast,series="SARIMA Forecast", PI=FALSE)+
ylab("Inflow m^{3}/s")+
xlab("Date")+
labs(col="Model")
SARIMA_autofit <- auto.arima(inflow_ts)
print(SARIMA_autofit)
SARIMA_forecast <- forecast(object = SARIMA_autofit, h = 12)
plot(SARIMA_forecast)
autoplot(ts_inflow_full)+
autolayer(SARIMA_forecast,series="SARIMA Forecast", PI=FALSE)+
ylab("Inflow m^{3}/s")+
xlab("Date")+
labs(col="Model")
autoplot(ts_inflow_full)+
autolayer(for_and_seasonality, series = "ARIMA Forecast + seasonality")+
autolayer(SARIMA_forecast,series="SARIMA Forecast", PI=FALSE)+
ylab("Inflow m^{3}/s")+
xlab("Date")+
labs(col="Model")
SES_seas_fit <- ses(y = inflow_ts, h = 12, holdout = FALSE, silent = FALSE)
summary(SES_seas_fit)
plot(SES_seas_fit)
ts_plot_full<- ggplot(inflow_processed_full, aes(x=Date, y=monthly_inflow))+
labs(y="Monthly Inflow m^{3}/s")+
geom_line()+theme_bw()
ts_plot_full
autoplot(ts_inflow_full)+
autolayer(for_and_seasonality, series = "ARIMA Forecast + seasonality")+
autolayer(SARIMA_forecast,series="SARIMA Forecast", PI=FALSE)+
autolayer(SES_seas_fit, series="Exponential Smoothing", PI=FALSE)+
ylab("Inflow m^{3}/s")+
xlab("Date")+
labs(col="Model")
View(SES_seas_fit)
SES_seas_fit$fitted
View(SES_seas_fit)
forecast_values_df<- data.frame(Observed=observed_2010,
ARIMA_SEAS=as.matrix(for_and_seasonality),
SARIMA=SARIMA_forecast$fitted,
ses=SES_seas_fit$mean)
observed_2010<- ts_inflow_full[121:132]
forecast_values_df<- data.frame(Observed=observed_2010,
ARIMA_SEAS=as.matrix(for_and_seasonality),
SARIMA=SARIMA_forecast$fitted,
ses=SES_seas_fit$mean)
SES_seas_fit$mean
forecast_values_df<- data.frame(Observed=observed_2010,
ARIMA_SEAS=as.matrix(for_and_seasonality),
SARIMA=SARIMA_forecast$fitted)
View(forecast_values_df)
View(SARIMA_forecast)
SARIMA_forecast$fitted
View(SARIMA_forecast)
plot(SARIMA_forecast)
SARIMA_forecast$mean
forecast_values_df<- data.frame(Observed=observed_2010,
ARIMA_SEAS=as.matrix(for_and_seasonality),
SARIMA=SARIMA_forecast$mean)
View(forecast_values_df)
forecast_values_df<- data.frame(Observed=observed_2010,
ARIMA_SEAS=as.matrix(for_and_seasonality),
SARIMA=SARIMA_forecast$mean,
ses=SES_seas_fit$mean)
View(forecast_values_df)
forecast_values_df<- data.frame(Observed=observed_2010,
ARIMA_SEAS=as.matrix(for_and_seasonality),
SARIMA=SARIMA_forecast$mean,
SES=SES_seas_fit$mean)
MSE = sum((forecast_values_df$Observed - forecast_values_df$ARIMA_SEAS)^2)/12
RMSE_ARIMA_SEAS = sqrt(MSE_ARIMA_SEAS)
MSE_ARIMA_SEAS = sum((forecast_values_df$Observed - forecast_values_df$ARIMA_SEAS)^2)/12
RMSE_ARIMA_SEAS = sqrt(MSE_ARIMA_SEAS)
observed = forecast_values_df$Observed
MSE_ARIMA_SEAS = sum((observed - forecast_values_df$ARIMA_SEAS)^2)/12
RMSE_ARIMA_SEAS = sqrt(MSE_ARIMA_SEAS)
n=12
MAPE_ARIMA_SEAS = sum(abs(observed - forecast_values_df$ARIMA_SEAS)/observed)/n*100
MSE_SARIMA = sum((observed - forecast_values_df$SARIMA)^2)/n
RMSE_SARIMA = sqrt(MSE_SARIMA)
MAPE_SARIMA = sum(abs(observed - forecast_values_df$SARIMA)/observed)/n*100
MSE_SES = sum((observed - forecast_values_df$SES)^2)/n
RMSE_SES = sqrt(MSE_SES)
MAPE_SES = sum(abs(observed - forecast_values_df$SES)/observed)/n*100
scores<- data.frame(MSE_ARIMA_SEAS,RMSE_ARIMA_SEAS, MAPE_ARIMA_SEAS)
View(scores)
View(scores)
scores<- data.frame(RMSE = c(RMSE_ARIMA_SEAS,RMSE_SARIMA,RMSE_SES))
View(scores)
scores<- data.frame(RMSE = RMSE_ARIMA_SEAS,RMSE_SARIMA,RMSE_SES)
View(scores)
scores<- data.frame(RMSE = RMSE_ARIMA_SEAS,RMSE_SARIMA,RMSE_SES,
MAPE = MAPE_ARIMA_SEAS, MAPE_SARIMA, MAPE_SES)
scores<- data.frame(RMSE = c(RMSE_ARIMA_SEAS,RMSE_SARIMA,RMSE_SES),
MAPE = c(MAPE_ARIMA_SEAS, MAPE_SARIMA, MAPE_SES))
rownames(scores) = c("ARIMA and Seasonality", "SARIMA", "SES")
scores
autoplot(ts_inflow_full)+
autolayer(for_and_seasonality, series = "ARIMA Forecast + seasonality")+
ylab("Inflow m^{3}/s")+
xlab("Date")+
labs(col="Model")
autoplot(deseasonal_inflow_full)+
autolayer(ARIMA_forecast,series="ARIMA", PI=FALSE)+
ylab("Inflow m^{3}/s")+
xlab("Date")+
labs(col="Model")
autoplot(ts_inflow_full)+
autolayer(for_and_seasonality, series = "ARIMA Forecast + seasonality")+
ylab("Inflow m^{3}/s")+
xlab("Date")+
labs(col="Model")
decompose_inflow
decompose_inflow$seasonal
seasonality<- decompose_inflow$seasonal[97:108]
for_and_seasonality<- ARIMA_forecast$mean + seasonality
autoplot(ts_inflow_full)+
autolayer(for_and_seasonality, series = "ARIMA Forecast + seasonality")+
ylab("Inflow m^{3}/s")+
xlab("Date")+
labs(col="Model")
autoplot(ts_inflow_full)+
autolayer(for_and_seasonality, series = "ARIMA Forecast + seasonality")+
autolayer(SARIMA_forecast,series="SARIMA Forecast", PI=FALSE)+
autolayer(SES_seas_fit, series="Exponential Smoothing", PI=FALSE)+
ylab("Inflow m^{3}/s")+
xlab("Date")+
labs(col="Model")
library(lubridate)
library(ggplot2)
library(forecast)
library(Kendall)
library(tseries)
library(tidyverse)
library(smooth)
inflowdata<- read.table(file="./Data/inflowtimeseries.txt", sep = '\t', stringsAsFactors = TRUE)
inflow_data<- separate(inflowdata, col="V1", int=c('Date', 'V'), sep = ' ')
inflow_processed<- inflow_data%>%
mutate( Date = my(paste0(Date, "-", V)))%>%
rename(monthly_inflow = V15)%>%
select(Date, monthly_inflow)%>%
filter(between(Date, as.Date('2000-01-01'), as.Date('2009-12-01')))
inflow_processed_full<- inflow_data%>%
mutate( Date = my(paste0(Date, "-", V)))%>%
rename(monthly_inflow = V15)%>%
select(Date, monthly_inflow)%>%
filter(between(Date, as.Date('2000-01-01'), as.Date('2010-12-01')))
inflow_ts<-ts(inflow_processed[,2],
start = c(year(inflow_processed$Date[1]), month(inflow_processed$Date[1])),
frequency = 12)
ts_plot<- ggplot(inflow_processed, aes(x=Date, y=monthly_inflow))+
labs(y="Monthly Inflow m^{3}/s")+
geom_line()+theme_bw()
plot(ts_plot)
par(mfrow=c(1,2))
ACF_Plot <- Acf(inflow_processed$monthly_inflow, lag = 40, main = "ACF", plot = TRUE)
PACF_Plot <- Pacf(inflow_processed$monthly_inflow, lag = 40, main= "PACF")
decompose_inflow<- decompose(inflow_ts, "additive")
plot(decompose_inflow)
deseasonal_inflow<- seasadj(decompose_inflow)
df<- data.frame(inflow_processed, deseasonal=as.matrix(deseasonal_inflow))
df_longer<- df%>%
pivot_longer(!Date, names_to = "inflow", values_to = "value")
ggplot(df_longer) +
geom_line(aes(x=Date, y=value, color=inflow))+
labs(y="Monthly Inflow m^{3}/s")
par(mfrow=c(1,2))
Acf(deseasonal_inflow, lag = 40)
ACF_Plot
Pacf(deseasonal_inflow, lag = 40)
PACF_Plot
par(mfrow=c(1,1))
decompose_inflow<- decompose(inflow_ts, "additive")
plot(decompose_inflow)
deseasonal_inflow<- seasadj(decompose_inflow)
df<- data.frame(inflow_processed, deseasonal=as.matrix(deseasonal_inflow))
df_longer<- df%>%
pivot_longer(!Date, names_to = "inflow", values_to = "value")
ggplot(df_longer) +
geom_line(aes(x=Date, y=value, color=inflow))+
labs(y="Monthly Inflow m^{3}/s")
par(mfrow=c(1,2))
Acf(deseasonal_inflow, lag = 40)
ACF_Plot
Pacf(deseasonal_inflow, lag = 40)
PACF_Plot
par(mfrow=c(1,1))
ACF_Plot <- Acf(inflow_processed$monthly_inflow, lag = 40, main = "ACF", plot = TRUE)
PACF_Plot <- Pacf(inflow_processed$monthly_inflow, lag = 40, main= "PACF", plot= TRUE)
Acf(deseasonal_inflow, lag = 40)
ACF_Plot
par(mfrow=c(1,2))
Acf(deseasonal_inflow, lag = 40)
plot(ACF_Plot)
Pacf(deseasonal_inflow, lag = 40)
plot(PACF_Plot)
ggplot(df_longer) +
geom_line(aes(x=Date, y=value, color=inflow))+
labs(y="Monthly Inflow m^{3}/s")
non_seas_ARIMA<- auto.arima(deseasonal_inflow, max.D = 0, max.P = 0, max.Q = 0)
print(non_seas_ARIMA)
ARIMA_forecast<- forecast(object = non_seas_ARIMA, h=12)
plot(ARIMA_forecast)
ts_inflow_full<- ts(inflow_processed_full[,2], start = c(2000,01), frequency = 12)
decompose_inflow_full<- decompose(ts_inflow_full, "additive")
deseasonal_inflow_full<- seasadj(decompose_inflow_full)
autoplot(deseasonal_inflow_full)+
autolayer(ARIMA_forecast,series="ARIMA", PI=FALSE)+
ylab("Inflow m^{3}/s")+
xlab("Date")+
labs(col="Model")
seasonality<- decompose_inflow$seasonal[97:108]
for_and_seasonality<- ARIMA_forecast$mean + seasonality
autoplot(ts_inflow_full)+
autolayer(for_and_seasonality, series = "ARIMA Forecast + seasonality")+
ylab("Inflow m^{3}/s")+
xlab("Date")+
labs(col="Model")
SARIMA_autofit <- auto.arima(inflow_ts)
print(SARIMA_autofit)
SARIMA_forecast <- forecast(object = SARIMA_autofit, h = 12)
plot(SARIMA_forecast)
autoplot(ts_inflow_full)+
autolayer(SARIMA_forecast,series="SARIMA Forecast", PI=FALSE)+
ylab("Inflow m^{3}/s")+
xlab("Date")+
labs(col="Model")
SES_seas_fit <- ses(y = inflow_ts, h = 12, holdout = FALSE, silent = FALSE)
summary(SES_seas_fit)
plot(SES_seas_fit)
ts_plot_full<- ggplot(inflow_processed_full, aes(x=Date, y=monthly_inflow))+
labs(y="Monthly Inflow m^{3}/s")+
geom_line()+theme_bw()
ts_plot_full
autoplot(ts_inflow_full)+
autolayer(for_and_seasonality, series = "ARIMA Forecast + seasonality")+
autolayer(SARIMA_forecast,series="SARIMA Forecast", PI=FALSE)+
autolayer(SES_seas_fit, series="Exponential Smoothing", PI=FALSE)+
ylab("Inflow m^{3}/s")+
xlab("Date")+
labs(col="Model")
ts_inflow_full
observed_2010<- ts_inflow_full[121:132]
SES_seas_fit$mean
SARIMA_forecast$mean
forecast_values_df<- data.frame(Observed=observed_2010,
ARIMA_SEAS=as.matrix(for_and_seasonality),
SARIMA=SARIMA_forecast$mean,
SES=SES_seas_fit$mean)
observed = forecast_values_df$Observed
n=12
#ARIMA + Seasonality
MSE_ARIMA_SEAS = sum((observed - forecast_values_df$ARIMA_SEAS)^2)/n
RMSE_ARIMA_SEAS = sqrt(MSE_ARIMA_SEAS)
MAPE_ARIMA_SEAS = sum(abs(observed - forecast_values_df$ARIMA_SEAS)/observed)/n*100
#SARIMA
MSE_SARIMA = sum((observed - forecast_values_df$SARIMA)^2)/n
RMSE_SARIMA = sqrt(MSE_SARIMA)
MAPE_SARIMA = sum(abs(observed - forecast_values_df$SARIMA)/observed)/n*100
#SES
MSE_SES = sum((observed - forecast_values_df$SES)^2)/n
RMSE_SES = sqrt(MSE_SES)
MAPE_SES = sum(abs(observed - forecast_values_df$SES)/observed)/n*100
scores<- data.frame(RMSE = c(RMSE_ARIMA_SEAS,RMSE_SARIMA,RMSE_SES),
MAPE = c(MAPE_ARIMA_SEAS, MAPE_SARIMA, MAPE_SES))
rownames(scores) = c("ARIMA and Seasonality", "SARIMA", "SES")
scores
