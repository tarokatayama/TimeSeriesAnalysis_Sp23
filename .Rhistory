par(mfrow=c(1,2))
ACF_Plot <- Acf(electricity_price_processed$All.sectors, lag = 40, plot = TRUE)
PACF_Plot <- Pacf(electricity_price_processed$All.sectors, lag = 40)
par(mfrow=c(1,1))
TS_Plot <-
ggplot(electricity_price_processed, aes(x=Month, y=All.sectors)) +
geom_line()
plot(TS_Plot)
#ACF and PACF plots
par(mfrow=c(1,2))
ACF_Plot <- Acf(electricity_price_processed$All.sectors, lag = 40, plot = TRUE)
PACF_Plot <- Pacf(electricity_price_processed$All.sectors, lag = 40)
par(mfrow=c(1,1))
#Using R decompose function
decompose_allsectors_price <- decompose(ts_electricity_price[,"All.sectors"],"additive")
plot(decompose_allsectors_price)
#The ACF plot show a slow decay which is a sign of non-stationarity.
#Creating non-seasonal residential price time series because some models can't handle seasonality
deseasonal_allsectors_price <- seasadj(decompose_allsectors_price)
#Model 1: Arithmetic mean on original data
MEAN_seas <- meanf(y = ts_electricity_price[,"All.sectors"], h = 36)
plot(MEAN_seas)
#Model 2: Arithmetic mean on deseas data
MEAN_deseas <- meanf(deseasonal_allsectors_price, h=36)
plot(MEAN_deseas)
#Model 3: Seasonal naive on original data
SNAIVE_seas <- snaive(ts_electricity_price[,"All.sectors"], h=36)
plot(SNAIVE_seas)
#Model 4: Naive on deseas data
NAIVE_deseas <- naive(deseasonal_allsectors_price, h=36)
plot(NAIVE_deseas)
#Model 1: Arithmetic mean on original data
MEAN_seas <- meanf(y = ts_electricity_price[,"All.sectors"], h = 36)
plot(MEAN_seas)
#Model 2: Arithmetic mean on deseas data
MEAN_deseas <- meanf(deseasonal_allsectors_price, h=36)
plot(MEAN_deseas)
#Model 3: Seasonal naive on original data
SNAIVE_seas <- snaive(ts_electricity_price[,"All.sectors"], h=36)
plot(SNAIVE_seas)
#Model 4: Naive on deseas data
NAIVE_deseas <- naive(deseasonal_allsectors_price, h=36)
plot(NAIVE_deseas)
# Model 5: Simple moving average on deseasonal data
SMA_deseas_fit <- smooth::sma(y = deseasonal_allsectors_price, h = 36, holdout = FALSE, silent = FALSE) #,order=2)
summary(SMA_deseas_fit)
SES_deseas_fit=ses( y = deseasonal_allsectors_price, h = 36, holdout = FALSE, silent = FALSE)  #alpha is NULL
summary(SES_deseas_fit)
plot(SES_deseas_fit)
#Best alpha = 0.923
plot(deseasonal_allsectors_price,col="black")
lines(SES_deseas_fit$fitted, col="blue")
SES_seas_fit <- ses(y = ts_electricity_price[,"All.sectors"], h = 36, holdout = FALSE, silent = FALSE)
summary(SES_seas_fit)
plot(SES_seas_fit)
plot(ts_electricity_price[,"All.sectors"],col="black")
lines(SES_seas_fit$fitted, col="blue")
SMA_seas_fit <- sma( y = ts_electricity_price[,"All.sectors"], h = 36, holdout = FALSE, silent = FALSE) #order=2
summary(SMA_seas_fit)
SMA_deseas_fit <- smooth::sma(y = deseasonal_allsectors_price, h = 36, holdout = FALSE, silent = FALSE) #,order=2)
summary(SMA_deseas_fit)
#Load/install required package here
library(lubridate)
library(ggplot2)
library(forecast)
library(Kendall)
library(tseries)
library(outliers)
library(tidyverse)
#install.packages("smooth")
library(smooth)
knitr::opts_chunk$set(echo = TRUE,tidy.opts=list(width.cutoff=80), tidy=FALSE)
library(lubridate)
library(ggplot2)
library(forecast)
library(Kendall)
library(tseries)
library(outliers)
library(tidyverse)
#Load/install required package here
library(lubridate)
library(ggplot2)
library(forecast)
library(Kendall)
library(tseries)
library(outliers)
library(tidyverse)
#install.packages("smooth")
library(smooth)
net_generation<- read.csv("../Data/Net_generation_United_States_all_sectors_monthly.csv", stringsAsFactors = TRUE)
net_generation<- read.csv("./Data/Net_generation_United_States_all_sectors_monthly.csv", stringsAsFactors = TRUE)
net_generation<- read.csv("./Data/Net_generation_United_States_all_sectors_monthly.csv", header= TRUE, stringsAsFactors = TRUE)
net_generation<- read.csv("./Data/Net_generation_United_States_all_sectors_monthly.csv", header= TRUE,
stringsAsFactors = TRUE, skip = 4)
View(net_generation)
net_generation<- read.csv("./Data/Net_generation_United_States_all_sectors_monthly.csv", header= TRUE,
stringsAsFactors = TRUE, skip = 3)
net_generation<- read.csv("./Data/Net_generation_United_States_all_sectors_monthly.csv", header= TRUE,
stringsAsFactors = TRUE, skip = 4)
net_generation_processed<-net_generation%>%
mutate( Month=my(Month))%>%
rename(naturalgas = natural.gas.thousand.megawatthours)%>%
select( Month, naturalgas)
View(net_generation_processed)
net_generation_processed<-net_generation%>%
mutate( Month=my(Month))%>%
rename(naturalgas = natural.gas.thousand.megawatthours)%>%
select( Month, naturalgas)
View(net_generation_processed)
net_generation_processed<-net_generation%>%
mutate( Month=my(Month))%>%
rename(naturalgas = natural.gas.thousand.megawatthours)%>%
arrange(Month)%>%
select( Month, naturalgas)
ts_natural_gas<- ts(net_generation_processed,
start = c(year(net_generation_processed[1]), month(net_generation_processed[1])),
frequency = 12)
View(net_generation_processed)
#Importing time series data from text file#
electricity_price <- read.csv(file="./Data/Average_retail_price_of_electricity_United_States_monthly.csv",header=TRUE,skip=4)
#Inspect data
head(electricity_price)
nvar <- ncol(electricity_price) - 1
nobs <- nrow(electricity_price)
#Preparing the data - create date object and rename columns
electricity_price_processed <-
electricity_price %>%
mutate( Month = my(Month) ) %>%
rename( All.sectors = all.sectors.cents.per.kilowatthour ) %>%
rename( Residential = residential.cents.per.kilowatthour ) %>%
rename( Commercial = commercial.cents.per.kilowatthour ) %>%
rename( Industrial = industrial.cents.per.kilowatthour ) %>%
arrange( Month )
head(electricity_price_processed)
summary(electricity_price_processed)
#No NAs so we don't need to worry about missing values
ts_electricity_price <- ts(electricity_price_processed[,2:(nvar+1)],
start=c(year(electricity_price_processed$Month[1]),month(electricity_price_processed$Month[1])),
frequency=12)
View(ts_electricity_price)
ts_natural_gas<- ts(net_generation_processed[],
start = c(year(net_generation_processed[1]), month(net_generation_processed[1])),
frequency = 12)
ts_natural_gas<- ts(net_generation_processed,
start = c(year(net_generation_processed[,1]), month(net_generation_processed[,1])),
frequency = 12)
View(ts_natural_gas)
ts_natural_gas<- ts(net_generation_processed[,2],
start = c(year(net_generation_processed[,1]), month(net_generation_processed[,1])),
frequency = 12)
View(net_generation_processed)
ts_natural_gas<- ts(net_generation_processed[,2],
start = c(year(net_generation_processed$Month[1]), month(net_generation_processed$Month[1])),
frequency = 12)
View(net_generation_processed)
ts_plot<- ggplot(net_generation_processed, aes(x=Month, y= naturalgas)) +
geom_line()
plot(ts_plot)
ts_plot<- ggplot(net_generation_processed, aes(x=Month, y= naturalgas)) +
labs(x="Year")+
geom_line()
plot(ts_plot)
View(net_generation)
ts_plot<- ggplot(net_generation_processed, aes(x=Month, y= naturalgas)) +
labs(x="Year", y="Natural Gas (Thousand Megawatt Hours")+
geom_line()
plot(ts_plot)
ts_plot<- ggplot(net_generation_processed, aes(x=Month, y= naturalgas)) +
labs(x="Year", y="Natural Gas (Thousand Megawatt Hours)")+
geom_line()
plot(ts_plot)
par(mfrow=c(1,2))
par(mfrow=c(1,2))
ACF_Plot <- Acf(net_generation_processed$naturalgas, lag = 40, plot = TRUE)
PACF_Plot <- Pacf(net_generation_processed$naturalgas, lag = 40)
Acf(ts_natural_gas[,1], lag= 40)
Acf(ts_natural_gas, lag= 40)
par(mfrow=c(1,2))
ACF_Plot <- Acf(net_generation_processed$naturalgas, lag = 40, main = "ACF", plot = TRUE)
PACF_Plot <- Pacf(net_generation_processed$naturalgas, lag = 40)
par(mfrow=c(1,2))
ACF_Plot <- Acf(net_generation_processed$naturalgas, lag = 40, main = "ACF", plot = TRUE)
PACF_Plot <- Pacf(net_generation_processed$naturalgas, lag = 40, main= "PCF")
par(mfrow=c(1,2))
ACF_Plot <- Acf(net_generation_processed$naturalgas, lag = 40, main = "ACF", plot = TRUE)
PACF_Plot <- Pacf(net_generation_processed$naturalgas, lag = 40, main= "PACF")
decompose(ts_natural_gas, "additive")
decompose_natural_gas<- decompose(ts_natural_gas, "additive")
View(decompose_natural_gas)
plot(decompose_natural_gas)
deseasonal_natural_gas<- seasadj(ts_natural_gas)
plot(deseasonal_natural_gas)
deseasonal_natural_gas<- seasadj(decompose_natural_gas)
plot(deseasonal_natural_gas)
par(mfrow=c(1,1))
plot(deseasonal_natural_gas)
Acf(deseasonal_natural_gas, lag = 40)
par(mfrow=c(1,2))
Acf(deseasonal_natural_gas, lag = 40)
Pacf(deseasonal_natural_gas, lag = 40)
plot(deseasonal_natural_gas)
plot(deseasonal_natural_gas)
plot(decompose_natural_gas)
plot(deseasonal_natural_gas)
par(mfrow=c(1,2))
Acf(deseasonal_natural_gas, lag = 40)
Pacf(deseasonal_natural_gas, lag = 40)
par(mfrow=c(1,1))
ACF_Plot <- Acf(net_generation_processed$naturalgas, lag = 40, main = "ACF", plot = TRUE)
PACF_Plot <- Pacf(net_generation_processed$naturalgas, lag = 40, main= "PACF")
Pacf(deseasonal_natural_gas, lag = 40)
adftest<- adf.test(deseasonal_natural_gas, alternative = "stationary")
View(adftest)
print(adftest)
mannkendalltest<- mannkendalltest(deseasonal_natural_gas)
mannkendalltest<- MannKendall(deseasonal_natural_gas)
print(summary(mannkendalltest))
ndiff<- ndiffs(deseasonal_natural_gas)
?Arima()
ARIMA_Manual<- Arima(deseasonal_natural_gas, order = c(2,1,0), include.mean = TRUE)
?cat
cat(ARIMA_Manual)
View(ARIMA_Manual)
cat(ARIMA_Manual$coef)
ARIMA_Manual$
checkresiduals(ARIMA_Manual)
plot(ARIMA_Manual$residuals)
Acf(ARIMA_Manual$residuals)
checkresiduals(ARIMA_Manual, lag=40)
Acf(ARIMA_Manual$residuals,lag=40)
Pacf(ARIMA_Manual$residuals, lag=40)
checkresiduals(ARIMA_Manual, lag=40)
?checkresiduals
checkresiduals(ARIMA_Manual, lag=40)
ARIMA_Manual<- Arima(deseasonal_natural_gas, order = c(2,1,0), include.drift = TRUE)
cat(ARIMA_Manual$coef)
plot(ARIMA_Manual$residuals)
Acf(ARIMA_Manual$residuals,lag=40)
Pacf(ARIMA_Manual$residuals, lag=40)
checkresiduals(ARIMA_Manual, lag=40)
plot(ts_plot)
par(mfrow=c(1,2))
ACF_Plot <- Acf(net_generation_processed$naturalgas, lag = 40, main = "ACF", plot = TRUE)
PACF_Plot <- Pacf(net_generation_processed$naturalgas, lag = 40, main= "PACF")
adftest2<- adf.test(ts_natural_gas, alternative = "stationary")
print(adftest2)
mannkendalltest2<- MannKendall(ts_natural_gas)
print(summary(mannkendalltest2))
ndiff2<- ndiffs(ts_natural_gas)
SARIMA_Manual<- Arima(ts_natural_gas, order = c(2,1,0), seasonal = c(0,1,1), include.drift = FALSE)
print(SARIMA_Manual)
cat(SARIMA_Manual$coef)
plot(SARIMA_Manual$residuals)
Acf(SARIMA_Manual$residuals,lag=40)
Pacf(SARIMA_Manual$residuals, lag=40)
checkresiduals(SARIMA_Manual, lag=40)
checkresiduals(SARIMA_Manual, lag=40)
checkresiduals(ARIMA_Manual, lag=40)
ARIMA_autofit <- auto.arima(deseasonal_natural_gas, max.D = 0, max.P = 0, max.Q = 0)
print(ARIMA_autofit)
SARIMA_autofit <- auto.arima(ts_natural_gas)
print(SARIMA_autofit)
adftest<- adf.test(deseasonal_natural_gas, alternative = "stationary")
print(adftest)
mannkendalltest<- MannKendall(deseasonal_natural_gas)
print(summary(mannkendalltest))
print(adftest2)
ndiff<- ndiffs(deseasonal_natural_gas)
seasonalmannkendalltest<- SeasonalMannKendall(ts_natural_gas)
print(seasonalmannkendalltest)
par(mfrow=c(1,2))
Acf(deseasonal_natural_gas, lag = 40)
Pacf(deseasonal_natural_gas, lag = 40)
ARIMA_Manual<- Arima(deseasonal_natural_gas, order = c(2,1,0), include.drift = TRUE)
cat(ARIMA_Manual$coef)
Acf(SARIMA_Manual$residuals,lag=40)
Pacf(SARIMA_Manual$residuals, lag=40)
cat("Number of seasonal differencing needed: ",ndiff)
diff_deseas_natural_gas<- diff(deseasonal_natural_gas, lag = 1, differences = 1)
Acf(diff_deseas_natural_gas, lag=40)
Pacf(diff_deseas_natural_gas, lag=40)
# Find out how many time we need to difference
ns_diff <- nsdiffs(ts_electricity_price[,"Residential"])
cat("Number of seasonal differencing needed: ",ns_diff)
#Lets difference the series once at lag 12 to remove the seasonal trend.
residential_price_seas_diff <- diff(ts_electricity_price[,"Residential"],lag=12, differences=1)
residential_price_trend_diff <- diff(ts_electricity_price[,"Residential"],lag =1, differences=1) #diff done on orig series
residential_price_both_diff <- diff(residential_price_trend_diff,lag =12, differences=1)
#Check autocorrelation plots for differenced series
#Comparing ACFs
par(mfrow=c(1,4))
Acf(ts_electricity_price[,"Residential"],lag.max=40,main="Residential",ylim=c(-1,1))
Acf(residential_price_seas_diff,lag.max=60,main="Seasonal-Differenced Residential",ylim=c(-1,1))
Acf(residential_price_trend_diff,lag.max=60,main="Trend-Differenced Residential",ylim=c(-1,1))
par(mfrow=c(1,1))
Acf(residential_price_both_diff,lag.max=60,main="Twice-Differenced Residential",ylim=c(-1,1))
#Comparing PACFs
par(mfrow=c(1,4))
Pacf(ts_electricity_price[,"Residential"],lag.max=40,main="Residential",ylim=c(-1,1))
Pacf(residential_price_seas_diff,lag.max=60,main="Seasonal-Differenced Residential",ylim=c(-1,1))
Pacf(residential_price_trend_diff,lag.max=60,main="Trend-Differenced Residential",ylim=c(-1,1))
Pacf(residential_price_both_diff,lag.max=60,main="Twice-Differenced Residential",ylim=c(-1,1))
#Plot ACF and PACF for twice-differenced series - Steps 3 (order of non-seasonal) and 5 ) order of seasonal
par(mfrow=c(1,2))
Acf(residential_price_both_diff,lag.max=60,main="Twice-Differenced Residential",ylim=c(-1,1))
Pacf(residential_price_both_diff,lag.max=60,main="Twice-Differenced Residential",ylim=c(-1,1))
cat("Number of seasonal differencing needed: ",ndiff2)
nsdiff<- nsdiffs(ts_natural_gas)
cat("Number of seasonal differencing needed: ",nsdiff)
plot(ts_plot)
par(mfrow=c(1,2))
ACF_Plot <- Acf(net_generation_processed$naturalgas, lag = 40, main = "ACF", plot = TRUE)
PACF_Plot <- Pacf(net_generation_processed$naturalgas, lag = 40, main= "PACF")
#Difference the series once at lag 12 to remove the seasonal trend.
seas_diff <- diff(ts_natural_gas,lag=12, differences=1)
Acf(seas_diff, lag=40)
Pacf(seas_diff, lag=40)
# Find out how many time we need to difference
ns_diff <- nsdiffs(ts_electricity_price[,"Residential"])
cat("Number of seasonal differencing needed: ",ns_diff)
#Lets difference the series once at lag 12 to remove the seasonal trend.
residential_price_seas_diff <- diff(ts_electricity_price[,"Residential"],lag=12, differences=1)
residential_price_trend_diff <- diff(ts_electricity_price[,"Residential"],lag =1, differences=1) #diff done on orig series
residential_price_both_diff <- diff(residential_price_trend_diff,lag =12, differences=1)
#Check autocorrelation plots for differenced series
#Comparing ACFs
par(mfrow=c(1,4))
Acf(ts_electricity_price[,"Residential"],lag.max=40,main="Residential",ylim=c(-1,1))
Acf(residential_price_seas_diff,lag.max=60,main="Seasonal-Differenced Residential",ylim=c(-1,1))
Acf(residential_price_trend_diff,lag.max=60,main="Trend-Differenced Residential",ylim=c(-1,1))
par(mfrow=c(1,1))
Acf(residential_price_both_diff,lag.max=60,main="Twice-Differenced Residential",ylim=c(-1,1))
#Comparing PACFs
par(mfrow=c(1,4))
Pacf(ts_electricity_price[,"Residential"],lag.max=40,main="Residential",ylim=c(-1,1))
Pacf(residential_price_seas_diff,lag.max=60,main="Seasonal-Differenced Residential",ylim=c(-1,1))
Pacf(residential_price_trend_diff,lag.max=60,main="Trend-Differenced Residential",ylim=c(-1,1))
Pacf(residential_price_both_diff,lag.max=60,main="Twice-Differenced Residential",ylim=c(-1,1))
#Plot ACF and PACF for twice-differenced series - Steps 3 (order of non-seasonal) and 5 ) order of seasonal
par(mfrow=c(1,2))
Acf(residential_price_both_diff,lag.max=60,main="Twice-Differenced Residential",ylim=c(-1,1))
Pacf(residential_price_both_diff,lag.max=60,main="Twice-Differenced Residential",ylim=c(-1,1))
Acf(seas_diff, lag=40)
Pacf(seas_diff, lag=40)
adftest2<- adf.test(ts_natural_gas, alternative = "stationary")
print(adftest2)
#seasonalmannkendalltest<- SeasonalMannKendall(ts_natural_gas)
#print(seasonalmannkendalltest)
ndiff2<- ndiffs(ts_natural_gas)
cat("Number of seasonal differencing needed: ",ndiff2)
#seasonalmannkendalltest<- SeasonalMannKendall(ts_natural_gas)
#print(seasonalmannkendalltest)
ndiff2<- ndiffs(ts_natural_gas)
cat("Number of seasonal differencing needed: ",ndiff2)
SARIMA_Manual<- Arima(ts_natural_gas, order = c(1,1,0), seasonal = c(0,1,1), include.drift = FALSE)
cat(SARIMA_Manual$coef)
ARIMA_Manual<- Arima(deseasonal_natural_gas, order = c(1,1,1), include.drift = TRUE)
cat(ARIMA_Manual$coef)
plot(SARIMA_Manual$residuals)
Acf(SARIMA_Manual$residuals,lag=40)
Pacf(SARIMA_Manual$residuals, lag=40)
checkresiduals(SARIMA_Manual, lag=40)
Acf(SARIMA_Manual$residuals,lag=40)
Pacf(SARIMA_Manual$residuals, lag=40)
plot(ARIMA_Manual$residuals)
Acf(ARIMA_Manual$residuals,lag=40)
Pacf(ARIMA_Manual$residuals, lag=40)
checkresiduals(ARIMA_Manual, lag=40)
net_generation<- read.csv("../Data/Net_generation_United_States_all_sectors_monthly.csv", header= TRUE,
stringsAsFactors = TRUE, skip = 4)
Pacf(deseasonal_natural_gas, lag = 40)
Acf(deseasonal_natural_gas, lag = 40)
PACF_Plot <- Pacf(net_generation_processed$naturalgas, lag = 40, main= "PACF")
Acf(diff_deseas_natural_gas, lag=40)
Pacf(diff_deseas_natural_gas, lag=40)
Acf(diff_deseas_natural_gas, lag=40)
Pacf(diff_deseas_natural_gas, lag=40)
Acf(seas_diff, lag=40)
Pacf(seas_diff, lag=40)
ARIMA_autofit <- auto.arima(deseasonal_natural_gas, max.D = 0, max.P = 0, max.Q = 0)
print(ARIMA_autofit)
SARIMA_autofit <- auto.arima(ts_natural_gas)
print(SARIMA_autofit)
knitr::opts_chunk$set(echo = TRUE,tidy.opts=list(width.cutoff=80), tidy=FALSE)
library(lubridate)
library(ggplot2)
library(forecast)
#library(Kendall)
library(tseries)
#library(outliers)
library(tidyverse)
library(smooth)
#New package for M9 to assist with tables
#install.packages("kableExtra")
library(kableExtra)
#Importing time series data from text file#
electricity_price <- read.csv(
file="./Data/Average_retail_price_of_electricity_United_States_monthly.csv",
header=TRUE,
skip=4)
#Inspect data
head(electricity_price)
nvar <- ncol(electricity_price) - 1
nobs <- nrow(electricity_price)
#Preparing the data - create date object and rename columns
electricity_price_processed <-
electricity_price %>%
mutate( Month = my(Month) ) %>%
rename( All.sectors = all.sectors.cents.per.kilowatthour ) %>%
rename( Residential = residential.cents.per.kilowatthour ) %>%
rename( Commercial = commercial.cents.per.kilowatthour ) %>%
rename( Industrial = industrial.cents.per.kilowatthour ) %>%
arrange( Month )
#head(electricity_price_processed)
summary(electricity_price_processed)
#No NAs so we don't need to worry about missing values
#Keep 12 months out of the analysis for forecast accuracy checking
n_for <- 12
ts_electricity_price <- ts(
electricity_price_processed[1:(nobs-n_for),2:(nvar+1)],
start=c(year(electricity_price_processed$Month[1]),month(electricity_price_processed$Month[1])),
frequency=12)
#note that we are only transforming columns with electricity price, not the date columns
head(ts_electricity_price,15)
tail(ts_electricity_price,15)
TS_Plot <-
ggplot(electricity_price_processed, aes(x=Month, y=All.sectors)) +
geom_line()
plot(TS_Plot)
#ACF and PACF plots
par(mfrow=c(1,2))
ACF_Plot <- Acf(electricity_price_processed$All.sectors, lag = 40, plot = TRUE,main="")
PACF_Plot <- Pacf(electricity_price_processed$All.sectors, lag = 40, plot = TRUE,main="")
par(mfrow=c(1,1))
#Using R decompose function
decompose_allsectors_price <- decompose(ts_electricity_price[,"All.sectors"],"additive")
plot(decompose_allsectors_price)
#The ACF plot show a slow decay which is a sign of non-stationarity.
#Creating non-seasonal residential price time series because some models can't handle seasonality
deseasonal_allsectors_price <- seasadj(decompose_allsectors_price)
MEAN_seas <- meanf(y = ts_electricity_price[,"All.sectors"], h = 12)
checkresiduals(MEAN_seas)
SNAIVE_seas <- snaive(ts_electricity_price[,"All.sectors"], h=12)
checkresiduals(SNAIVE_seas)
SARIMA_autofit <- auto.arima(ts_electricity_price[,"All.sectors"])
checkresiduals(SARIMA_autofit)
knitr::opts_chunk$set(echo = TRUE,tidy.opts=list(width.cutoff=80), tidy=FALSE)
library(lubridate)
library(ggplot2)
library(forecast)
#library(Kendall)
library(tseries)
#library(outliers)
library(tidyverse)
library(smooth)
#New package for M9 to assist with tables
#install.packages("kableExtra")
library(kableExtra)
library(lubridate)
library(ggplot2)
library(forecast)
#library(Kendall)
library(tseries)
#library(outliers)
library(tidyverse)
library(smooth)
#New package for M9 to assist with tables
#install.packages("kableExtra")
library(kableExtra)
library(lubridate)
library(ggplot2)
library(forecast)
#library(Kendall)
library(tseries)
#library(outliers)
library(tidyverse)
library(smooth)
#New package for M9 to assist with tables
install.packages("kableExtra")
library(kableExtra)
actual=c(107,125,115,118,108)
forecast=c(110,121,112,120,109)
#Exercise 1: compute MAD, MSE and MAPE
n=length(actual)
ME =
MSE =
RMSE =
MAE =
MPE =
MAPE =
#Exercise 2: Compute the forecast accuracy metrics you calculated in Ex 1 with the results from accuracy() function.
observed <- electricity_price_processed[(nobs-n_for+1):nobs, "All.sectors"]
#Model 1: Arithmetic mean
MEAN_scores <- accuracy(MEAN_seas$mean,observed)  #store the performance metrics
plot(MEAN_seas)  #plot forecasts
#Model 2: Seasonal naive
SNAIVE_scores <- accuracy(SNAIVE_seas$mean,observed)
plot(SNAIVE_seas)
# Model 3:  SARIMA
#remember auto.arima does not call the forecast() internally so we need one more step
SARIMA_for <- forecast(SARIMA_autofit,h=12)
SARIMA_scores <- accuracy(SARIMA_for$mean,observed)
plot(SARIMA_for)
#create data frame
seas_scores <- as.data.frame(rbind(MEAN_scores, SNAIVE_scores, SARIMA_scores))
row.names(seas_scores) <- c("MEAN", "SNAIVE","SARIMA")
#choose model with lowest RMSE
best_model_index <- which.min(seas_scores[,"RMSE"])
cat("The best model by RMSE is:", row.names(seas_scores[best_model_index,]))
View(seas_scores)
mean_scores<- accuracy(forecast,actual)
View(mean_scores)
