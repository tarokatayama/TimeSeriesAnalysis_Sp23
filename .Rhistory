plot(solar_decompose)
plot(wind_decompose)
wind_decompose2<-  decompose(ts_df[,2], type = "multiplicative")
plot(wind_decompose2)
solar_decompose2<-  decompose(ts_df[,1], type = "multiplicative")
plot(solar_decompose2)
plot(wind_decompose2)
plot(solar_decompose)
plot(wind_decompose)
plot(solar_decompose2)
plot(wind_decompose2)
wind_solar_plots
View(df)
df.2012<- df%>%
filter(df, year(Date) >= 2012)
View(df)
df.2012<- df%>%
filter(df, year(Month) >= 2012)
df.2012<- df%>%
filter(df$Month, year(Month) >= 2012)
df.2012<- df%>%
filter(df$Month, year(Date) >= 2012)
?filter
filter(df, month >= 2012)
filter(df, year(month) >= 2012)
filter(df, date >= "2012-01-01")
View(df)
df%>%
filter(date>= "2012-01-01")
View(df)
df%>%
filter(Month>= "2012-01-01")
View(df)
df_2012<- df%>%
filter(Month>= "2012-01-01")
View(df_2012)
df_2012<- df%>%
filter(year(Month)>= "2012")
View(df_2012)
df_2012<- df%>%
filter(year(Month)>= "2012")
View(df_2012)
ts_df_2012<- ts(df_2012[,2:3], frequency = 12)
View(ts_df_2012)
decompose_2012_solar<-  decompose(ts_df_2012[,1], type = "addititve")
decompose_2012_solar<-  decompose(ts_df_2012[,1], type = "additive")
plot(decompose_2012_solar)
decompose_2012_wind<-  decompose(ts_df_2012[,2], type = "additive")
plot(decompose_2012_wind)
#Load/install required package here
library(forecast)
#install.packages("tseries")
#install.packages("dplyr")
library(dplyr)
library(tseries)
library(lubridate)
library(ggplot2)
#Importing data set
table_10.1<- read.table(file= "./Data/Table_10.1_Renewable_Energy_Production_and_Consumption_by_Source-Edit.csv",
header=TRUE,dec = ".",sep=",",stringsAsFactors = TRUE)
table_10.1<-cbind(date, table_10.1[,2:4])
View(table_10.1)
table_10.1<- table_10.1[, c("Month", "Total.Biomass.Energy.Production", "Total.Renewable.Energy.Production", "Hydroelectric.Power.Consumption")]
head(table_10.1)
View(table_10.1)
#Importing data set
table_10.1<- read.table(file= "./Data/Table_10.1_Renewable_Energy_Production_and_Consumption_by_Source-Edit.csv",
header=TRUE,dec = ".",sep=",",stringsAsFactors = TRUE)
View(table_10.1)
ts_table_10.1<- ts(table_10.1[,2:4], start = 1, end = 597, frequency = 12)
View(ts_table_10.1)
table_10.1<- table_10.1[, c("Month", "Total.Biomass.Energy.Production", "Total.Renewable.Energy.Production", "Hydroelectric.Power.Consumption")]
View(table_10.1)
View(table_10.1)
energy_data<-read_excel("../Data/Table_10.1_Renewable_Energy_Production_and_Consumption_by_Source.xlsx",
skip=11)
#Load/install required package here
#install.packages("xlsx")
library(readxl)
#install.packages("openxlsx")
library(openxlsx)
library(forecast)
library(tseries)
library(ggplot2)
library(Kendall)
library(lubridate)
library(tidyverse)  #load this package so yon clean the data frame using pipes
energy_data<-read_excel("../Data/Table_10.1_Renewable_Energy_Production_and_Consumption_by_Source.xlsx",
skip=11)
energy_data<-read_excel("./Data/Table_10.1_Renewable_Energy_Production_and_Consumption_by_Source.xlsx",
skip=11)
View(energy_data)
#Now let's extract the column names from row 11 only
read_col_names <- as.character(read_excel("./Data/Table_10.1_Renewable_Energy_Production_and_Consumption_by_Source.xlsx", skip = 10, n_max = 1,col_names = FALSE))
colnames(energy_data) <- read_col_names
plot(wind_decompose)
plot(wind_decompose2)
plot(solar_decompose2)
plot(wind_decompose2)
plot(solar_decompose2)
plot(decompose_2012_solar)
plot(decompose_2012_wind)
knitr::opts_chunk$set(echo = TRUE,tidy.opts=list(width.cutoff=80), tidy=FALSE)
library(lubridate)
library(ggplot2)
library(forecast)
library(Kendall)
library(tseries)
library(outliers)
library(tidyverse)
#Importing time series data from text file#
electricity_price <- read.csv(file="./Data/Average_retail_price_of_electricity_United_States_monthly.csv",header=TRUE,skip=4)
#Inspect data
head(electricity_price)
nvar <- ncol(electricity_price) - 1
nobs <- nrow(electricity_price)
#Preparing the data - create date object and rename columns
electricity_price_processed <-
electricity_price %>%
mutate( Month = my(Month) ) %>%
rename( All.sectors = all.sectors.cents.per.kilowatthour ) %>%
rename( Residential = residential.cents.per.kilowatthour ) %>%
rename( Commercial = commercial.cents.per.kilowatthour ) %>%
rename( Industrial = industrial.cents.per.kilowatthour ) %>%
arrange( Month )
head(electricity_price_processed)
summary(electricity_price_processed)
#No NAs so we don't need to worry about missing values
ts_electricity_price <- ts(electricity_price_processed[,2:(nvar+1)],
start=c(year(electricity_price_processed$Month[1]),month(electricity_price_processed$Month[1])),
frequency=12)
#note that we are only transforming columns with electricity price, not the date columns
head(ts_electricity_price,15)
tail(ts_electricity_price,15)
#Generating a box plot by factor where factor is month of the year
TS_Plot <-
ggplot(electricity_price_processed, aes(x=Month, y=Residential)) +
geom_line()
plot(TS_Plot)
#Note that although the date is reversed on the data frame, since we are using the ggplot and a date object, the plot looks right.
#ACF and PACF plots
par(mfrow=c(1,2))
ACF_Plot <- Acf(electricity_price_processed$Residential, lag = 40, plot = TRUE)
PACF_Plot <- Pacf(electricity_price_processed$Residential, lag = 40)
#Using R decompose function
decompose_residential_price <- decompose(ts_electricity_price[,"Residential"],"additive")
plot(decompose_residential_price)
#The ACF plot show a slow decay which is a sign of non-stationarity.
#Creating non-seasonal residential price time series
deseasonal_residential_price <- seasadj(decompose_residential_price)
# Find out how many time we need to difference
n_diff <- ndiffs(deseasonal_residential_price)
cat("Number of differencing needed: ",n_diff)
#Lets difference the series once at lag 1 to remove the trend.
deseasonal_residential_price_diff <- diff(deseasonal_residential_price,differences=1,lag=1)
#Add the new series to our data frame
df_residential_full <- data.frame( Month = electricity_price_processed$Month,
Residential = electricity_price_processed$Residential,
NonSeasonalResidential = as.numeric(deseasonal_residential_price),
ResidentialDiff = c(NA,as.numeric(deseasonal_residential_price_diff)))
#Check autocorrelation plot again
#Comparing ACFs
par(mfrow=c(1,3))
Acf(df_residential_full$Residential,lag.max=40,main="Residential",ylim=c(-.5,1))
Acf(df_residential_full$NonSeasonalResidential,lag.max=40,main="Non Sesonal Residential",ylim=c(-.5,1))
Acf(df_residential_full$ResidentialDiff,lag.max=40,main="Diff NonSeas Residential",ylim=c(-.5,1))
#Comparing PACFs
par(mfrow=c(1,3))
Pacf(df_residential_full$Residential,lag.max=40,main="Residential",ylim=c(-.5,1))
Pacf(df_residential_full$NonSeasonalResidential,lag.max=40,main="Non Sesonal Residential",ylim=c(-.5,1))
Pacf(df_residential_full$ResidentialDiff,lag.max=40,main="Diff NonSeas Residential",ylim=c(-.5,1))
# Find out how many time we need to difference
ns_diff <- nsdiffs(ts_electricity_price[,"Residential"])
cat("Number of seasonal differencing needed: ",ns_diff)
#Lets difference the series once at lag 12 to remove the seasonal trend.
residential_price_seas_diff <- diff(ts_electricity_price[,"Residential"],lag=12, differences=1)
residential_price_trend_diff <- diff(ts_electricity_price[,"Residential"],lag =1, differences=1) #diff done on orig series
residential_price_both_diff <- diff(residential_price_trend_diff,lag =12, differences=1)
#Check autocorrelation plots for differenced series
#Comparing ACFs
par(mfrow=c(1,4))
Acf(ts_electricity_price[,"Residential"],lag.max=40,main="Residential",ylim=c(-1,1))
Acf(residential_price_seas_diff,lag.max=60,main="Seasonal-Differenced Residential",ylim=c(-1,1))
Acf(residential_price_trend_diff,lag.max=60,main="Trend-Differenced Residential",ylim=c(-1,1))
par(mfrow=c(1,1))
Acf(residential_price_both_diff,lag.max=60,main="Twice-Differenced Residential",ylim=c(-1,1))
#Comparing PACFs
par(mfrow=c(1,4))
Pacf(ts_electricity_price[,"Residential"],lag.max=40,main="Residential",ylim=c(-1,1))
Pacf(residential_price_seas_diff,lag.max=60,main="Seasonal-Differenced Residential",ylim=c(-1,1))
Pacf(residential_price_trend_diff,lag.max=60,main="Trend-Differenced Residential",ylim=c(-1,1))
Pacf(residential_price_both_diff,lag.max=60,main="Twice-Differenced Residential",ylim=c(-1,1))
#Plot ACF and PACF for twice-differenced series - Steps 3 (order of non-seasonal) and 5 ) order of seasonal
par(mfrow=c(1,2))
Acf(residential_price_both_diff,lag.max=60,main="Twice-Differenced Residential",ylim=c(-1,1))
Pacf(residential_price_both_diff,lag.max=60,main="Twice-Differenced Residential",ylim=c(-1,1))
#Load/install required package here
library(lubridate)
library(ggplot2)
library(forecast)
library(Kendall)
library(tseries)
library(outliers)
library(tidyverse)
ARMAmodel_1<- arima.sim(model=list(ar=0.6), n=100) #the AR coefficient is 0.6
#ARMA(0,1)
ARMAmodel_2<- arima.sim(model=list(ma=0.9), n=100) #the MA coefficient is 0.9
#ARMA(1,1)
ARMAmodel_3<- arima.sim(model =list_c(ar=0.6,ma=0.9), n=100)
#ARMA(1,1)
ARMAmodel_3<- arima.sim(model=list_c(ar=0.6,ma=0.9), n=100)
#ARMA(1,1)
ARMAmodel_3<- arima.sim(model=list(ar=0.6,ma=0.9), n=100)
par(mfrow=c(1,3))
plot(ARMAmodel_1)
plot(ARMAmodel_1)
Acf(ARMAmodel_1)
par(mfrow=c(1,3))
Acf(ARMAmodel_1)
par(mfrow=c(1,3))
Acf(ARMAmodel_1)
Acf(ARMAmodel_2)
Acf(ARMAmodel_3)
par(mfrow=c(1,3))
Pacf(ARMAmodel_1)
Pacf(ARMAmodel_2)
Pacf(ARMAmodel_3)
#ARMA(0,1)
ARMAmodel_2<- arima.sim(model=list(ma=0.9), n=100) #the MA coefficient is 0.9
Acf(ARMAmodel_2)
par(mfrow=c(1,3))
Acf(ARMAmodel_1)
Acf(ARMAmodel_2)
Acf(ARMAmodel_3)
par(mfrow=c(1,3))
Pacf(ARMAmodel_1)
Pacf(ARMAmodel_2)
Pacf(ARMAmodel_3)
#ARMA(1,0)
ARMAmodel_1.1<- arima.sim(model=list(ar=0.6), n=1000) #the AR coefficient is 0.6
#ARMA(0,1)
ARMAmodel_2.1<- arima.sim(model=list(ma=0.9), n=1000) #the MA coefficient is 0.9
#ARMA(1,1)
ARMAmodel_3.1<- arima.sim(model=list(ar=0.6,ma=0.9), n=1000)
#ARMA(1,0)
ARMAmodel_1.1<- arima.sim(model=list(ar=0.6), n=1000) #the AR coefficient is 0.6
#ARMA(0,1)
ARMAmodel_2.1<- arima.sim(model=list(ma=0.9), n=1000) #the MA coefficient is 0.9
#ARMA(1,1)
ARMAmodel_3.1<- arima.sim(model=list(ar=0.6,ma=0.9), n=1000)
par(mfrow=c(1,3))
Acf(ARMAmodel_1.1)
Acf(ARMAmodel_2.1)
Acf(ARMAmodel_3.1)
par(mfrow=c(1,3))
Pacf(ARMAmodel_1.1)
Pacf(ARMAmodel_2.1)
Pacf(ARMAmodel_3.1)
par(mfrow=c(1,3))
Pacf(ARMAmodel_1)
Pacf(ARMAmodel_2)
Pacf(ARMAmodel_3)
par(mfrow=c(1,3))
Acf(ARMAmodel_1.1)
Acf(ARMAmodel_2.1)
Acf(ARMAmodel_3.1)
par(mfrow=c(1,3))
Pacf(ARMAmodel_1.1)
Pacf(ARMAmodel_2.1)
Pacf(ARMAmodel_3.1)
install.packages("sarima")
library(sarima)
SARIMAmodel_4<- sim_sarima(model=list(ma=0.5,sar=0.8, nseasons=12), n=1000)
Acf(SARIMAmodel_4)
Pacf(SARIMAmodel_4)
par(mfrow=c(1,3))
Acf(ARMAmodel_1)
Acf(ARMAmodel_2)
Acf(ARMAmodel_3)
par(mfrow=c(1,3))
Pacf(ARMAmodel_1)
Pacf(ARMAmodel_2)
Pacf(ARMAmodel_3)
par(mfrow=c(1,3))
Acf(ARMAmodel_1,lag=40)
Acf(ARMAmodel_2)
Acf(ARMAmodel_3)
```{r}
par(mfrow=c(1,3))
Acf(ARMAmodel_1,lag=40)
Acf(ARMAmodel_2,lag=40)
Acf(ARMAmodel_3,lag=40)
par(mfrow=c(1,3))
Pacf(ARMAmodel_1,lag=40)
Pacf(ARMAmodel_2,lag=40)
Pacf(ARMAmodel_3,lag=40)
par(mfrow=c(1,3))
Acf(ARMAmodel_1.1,lag=40)
Acf(ARMAmodel_2.1,lag=40)
Acf(ARMAmodel_3.1,lag=40)
par(mfrow=c(1,3))
Pacf(ARMAmodel_1.1,lag=40)
Pacf(ARMAmodel_2.1,lag=40)
Pacf(ARMAmodel_3.1,lag=40)
Acf(SARIMAmodel_4,lag=40)
Pacf(SARIMAmodel_4,lag=40)
Acf(SARIMAmodel_4,lag=40)
Pacf(SARIMAmodel_4,lag=40)
par(mfrow=c(1,3))
Acf(ARMAmodel_1,lag=40)
Acf(ARMAmodel_2,lag=40)
Acf(ARMAmodel_3,lag=40)
par(mfrow=c(1,3))
Pacf(ARMAmodel_1,lag=40)
Pacf(ARMAmodel_2,lag=40)
Pacf(ARMAmodel_3,lag=40)
SARIMAmodel_4<- sim_sarima(model=list(ma=0.5,sar=0.8, nseasons=12), n=1000)
Acf(SARIMAmodel_4,lag=40)
Pacf(SARIMAmodel_4,lag=40)
```
par(mfrow=c(1,2))
Acf(SARIMAmodel_4,lag=40)
Pacf(SARIMAmodel_4,lag=40)
#Remember the order d=1 will perform the differencing,
#so lets try ARIMA(1,1,1) on the non-seasonal residential data before differencing
Model_111 <- Arima(deseasonal_residential_price,order=c(1,1,1),include.drift=TRUE)
print(Model_111)
compare_aic <- data.frame(Model_111$aic)
#Check residuals series, if white noise we got a good fit
par(mar=c(3,3,3,0));par(mfrow=c(1,3))
ts.plot(Model_111$residuals)
Acf(Model_111$residuals,lag.max=40)
Pacf(Model_111$residuals,lag.max=40)
#Now let's try ARIMA(0,1,1)
Model_011 <- Arima(deseasonal_residential_price,order=c(0,1,1),include.drift=TRUE)
print(Model_011)
compare_aic <- data.frame(compare_aic,Model_011$aic)
compare_aic
#second model better fit
par(mar=c(3,3,3,0));par(mfrow=c(1,3))
ts.plot(Model_011$residuals)
Acf(Model_011$residuals,lag.max=40)
Pacf(Model_011$residuals,lag.max=40)
#Now let's try ARIMA(2,1,1)
Model_211 <- Arima(deseasonal_residential_price,order=c(2,1,1),include.drift=TRUE)
print(Model_211)
compare_aic <- data.frame(compare_aic,Model_211$aic)
compare_aic
par(mar=c(3,3,3,0));par(mfrow=c(1,3))
ts.plot(Model_211$residuals)
Acf(Model_211$residuals,lag.max=40)
Pacf(Model_211$residuals,lag.max=40)
#Now let's try ARIMA(1,1,2)
Model_112 <- Arima(deseasonal_residential_price,order=c(1,1,2),include.drift=TRUE)
print(Model_112)
compare_aic <- data.frame(compare_aic,Model_112$aic)
compare_aic
par(mar=c(3,3,3,0));par(mfrow=c(1,3))
ts.plot(Model_112$residuals)
Acf(Model_112$residuals,lag.max=40)
Pacf(Model_112$residuals,lag.max=40)
#Now let's try ARIMA(2,1,2)
Model_212 <- Arima(deseasonal_residential_price,order=c(2,1,2),include.drift=TRUE)
print(Model_212)
compare_aic <- data.frame(compare_aic,Model_212$aic)
compare_aic
par(mar=c(3,3,3,0));par(mfrow=c(1,3))
ts.plot(Model_212$residuals)
Acf(Model_212$residuals,lag.max=40)
Pacf(Model_212$residuals,lag.max=40)
print(compare_aic)
par(mfrow=c(1,3))
Acf(ARMAmodel_1,lag=40)
Acf(ARMAmodel_2,lag=40)
Acf(ARMAmodel_3,lag=40)
```
par(mfrow=c(1,3))
Acf(ARMAmodel_1,lag=40)
Acf(ARMAmodel_2,lag=40)
Acf(ARMAmodel_3,lag=40)
par(mfrow=c(1,3))
Pacf(ARMAmodel_1,lag=40)
Pacf(ARMAmodel_2,lag=40)
Pacf(ARMAmodel_3,lag=40)
par(mfrow=c(1,3))
Acf(ARMAmodel_1,lag=40)
Acf(ARMAmodel_2,lag=40)
Acf(ARMAmodel_3,lag=40)
SARIMA_autofit <- auto.arima(ts_electricity_price[,"Residential"])
print(SARIMA_autofit)
par(mfrow=c(1,3))
ts.plot(SARIMA_autofit$residuals)
Acf(SARIMA_autofit$residuals,lag.max=40)
Pacf(SARIMA_autofit$residuals,lag.max=40)
ARIMA_autofit <- auto.arima(deseasonal_residential_price,max.D=0,max.P = 0,max.Q=0)
print(ARIMA_autofit)
par(mfrow=c(1,3))
ts.plot(ARIMA_autofit$residuals)
Acf(ARIMA_autofit$residuals,lag.max=40)
Pacf(ARIMA_autofit$residuals,lag.max=40)
library(lubridate)
library(ggplot2)
library(forecast)
library(Kendall)
library(tseries)
library(outliers)
library(tidyverse)
#Load/install required package here
library(lubridate)
library(ggplot2)
library(forecast)
library(Kendall)
library(tseries)
library(outliers)
library(tidyverse)
install.packages("sarima")
library(sarima)
install.packages("sarima")
#Load/install required package here
library(lubridate)
library(ggplot2)
library(forecast)
library(Kendall)
library(tseries)
library(outliers)
library(tidyverse)
install.packages("sarima")
library(sarima)
#ARMA(1,0)
ARMAmodel_1<- arima.sim(model=list(ar=0.6), n=100) #the AR coefficient is 0.6
#ARMA(0,1)
ARMAmodel_2<- arima.sim(model=list(ma=0.9), n=100) #the MA coefficient is 0.9
#ARMA(1,1)
ARMAmodel_3<- arima.sim(model=list(ar=0.6,ma=0.9), n=100)
par(mfrow=c(1,3))
Acf(ARMAmodel_1,lag=40)
Acf(ARMAmodel_2,lag=40)
Acf(ARMAmodel_3,lag=40)
par(mfrow=c(1,3))
Pacf(ARMAmodel_1,lag=40)
Pacf(ARMAmodel_2,lag=40)
Pacf(ARMAmodel_3,lag=40)
par(mfrow=c(1,3))
Pacf(ARMAmodel_1,lag=40)
Pacf(ARMAmodel_2,lag=40)
Pacf(ARMAmodel_3,lag=40)
SARIMAmodel_4<- sim_sarima(model=list(ma=0.5,sar=0.8, nseasons=12), n=1000)
par(mfrow=c(1,2))
Acf(SARIMAmodel_4,lag=40)
Pacf(SARIMAmodel_4,lag=40)
#ARMA(1,0)
ARMAmodel_1<- arima.sim(model=list(ar=0.6), n=100) #the AR coefficient is 0.6
#ARMA(0,1)
ARMAmodel_2<- arima.sim(model=list(ma=0.9), n=100) #the MA coefficient is 0.9
#ARMA(1,1)
ARMAmodel_3<- arima.sim(model=list(ar=0.6,ma=0.9), n=100)
par(mfrow=c(1,3))
Acf(ARMAmodel_1,lag=40)
Acf(ARMAmodel_2,lag=40)
Acf(ARMAmodel_3,lag=40)
par(mfrow=c(1,3))
plot(Acf(ARMAmodel_1,lag=40))
Acf(ARMAmodel_2,lag=40)
Acf(ARMAmodel_3,lag=40)
par(mfrow=c(1,3))
Acf(ARMAmodel_1,lag=40)
Acf(ARMAmodel_2,lag=40)
Acf(ARMAmodel_3,lag=40)
par(mfrow=c(1,3))
Acf(ARMAmodel_1,lag=40, ylab="ACF")
Acf(ARMAmodel_2,lag=40)
Acf(ARMAmodel_3,lag=40)
#Load/install required package here
library(lubridate)
library(ggplot2)
library(forecast)
library(Kendall)
library(tseries)
library(tidyverse)
#install.packages("sarima")
library(sarima)
#ARMA(1,0)
ARMAmodel_1<- arima.sim(model=list(ar=0.6), n=100) #the AR coefficient is 0.6
#ARMA(0,1)
ARMAmodel_2<- arima.sim(model=list(ma=0.9), n=100) #the MA coefficient is 0.9
#ARMA(1,1)
ARMAmodel_3<- arima.sim(model=list(ar=0.6,ma=0.9), n=100)
par(mfrow=c(1,3))
Acf(ARMAmodel_1,lag=40, ylab="ACF")
Acf(ARMAmodel_2,lag=40)
Acf(ARMAmodel_3,lag=40)
par(mfrow=c(1,3))
Pacf(ARMAmodel_1,lag=40)
Pacf(ARMAmodel_2,lag=40)
Pacf(ARMAmodel_3,lag=40)
ARMAmodel_1.1<- arima.sim(model=list(ar=0.6), n=1000) #the AR coefficient is 0.6
#ARMA(0,1)
ARMAmodel_2.1<- arima.sim(model=list(ma=0.9), n=1000) #the MA coefficient is 0.9
#ARMA(1,1)
ARMAmodel_3.1<- arima.sim(model=list(ar=0.6,ma=0.9), n=1000)
par(mfrow=c(1,3))
Acf(ARMAmodel_1.1,lag=40)
Acf(ARMAmodel_2.1,lag=40)
Acf(ARMAmodel_3.1,lag=40)
par(mfrow=c(1,3))
Pacf(ARMAmodel_1.1,lag=40)
Pacf(ARMAmodel_2.1,lag=40)
Pacf(ARMAmodel_3.1,lag=40)
SARIMAmodel_4<- sim_sarima(model=list(ma=0.5,sar=0.8, nseasons=12), n=1000)
par(mfrow=c(1,2))
Acf(SARIMAmodel_4,lag=40)
Pacf(SARIMAmodel_4,lag=40)
