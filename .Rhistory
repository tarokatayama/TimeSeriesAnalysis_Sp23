plot(detrend_TRE, type ="l")
#Data frame - remember to not include January 1973
detrend_TRE<- detrend_TRE[2:597]
Tot_renewable_energy<- Tot_renewable_energy[2:nobs,]
View(Tot_renewable_energy)
Tot_renewable_energy<- table_10.1[,c("Month","Total.Renewable.Energy.Production")]
Tot_renewable_energy$Month<- ym(Tot_renewable_energy$Month)
Tot_renewable_energy<- table_10.1[,c("Month","Total.Renewable.Energy.Production")]
Tot_renewable_energy<- Tot_renewable_energy[2:nobs,]
library(tidyverse)
df<- data_frame(Date=Tot_renewable_energy$Month, Total.Renewable.Energy=Tot_renewable_energy$Total.Renewable.Energy.Production,
Detrend=detrend_TRE, Diffy=diffy_tot_renewable_energy)
View(df)
View(df)
View(df)
#Use ggplot
ggplot(df, aes(x=Date, y= Total.Renewable.Energy))+
geom_line()
#Use ggplot
ggplot(df, aes(x=Date, y= Total.Renewable.Energy))+
geom_line()+
geom_line(aes(x=Date, y= Detrend))
#Use ggplot
ggplot(df, aes(x=Date, y= Total.Renewable.Energy, color = "blue"))+
geom_line()+
geom_line(aes(x=Date, y= Detrend, color = "green"))+
geom_line(aes(x=Date, y= Diffy, color= "red"))
#Use ggplot
ggplot(df, aes(x=Date, y= Total.Renewable.Energy, color = "blue"))+
geom_line()+
geom_line(aes(x=Date, y= Detrend, color = "green"))+
geom_line(aes(x=Date, y= Diffy))
#Use ggplot
ggplot(df, aes(x=Date, y= Total.Renewable.Energy, color = "blue"))
#Use ggplot
ggplot(df, aes(x=Date, y= Total.Renewable.Energy, color = "blue"))+
geom_line()
#Use ggplot
ggplot(df, aes(x=Date, y= Total.Renewable.Energy, color = "blue"))+
geom_line()
#Use ggplot
ggplot(df, aes(x=Date, y= Total.Renewable.Energy))+
geom_line()
#Use ggplot
ggplot(df, aes(x=Date, y= Total.Renewable.Energy))+
geom_line()+
geom_line(aes(x=Date, y= Detrend, color = "green"))+
geom_line(aes(x=Date, y= Diffy, color="blue"))
#Use ggplot
ggplot(df, aes(x=Date, y= Total.Renewable.Energy))+
geom_line()+
geom_line(aes(x=Date, y= Detrend), color = "green")+
geom_line(aes(x=Date, y= Diffy), color="blue")
?pivot_longer
df_longer<- pivot_longer(df, cols = c("Total.Renewable.Energy", "Detrend", "Diffy"))
View(df_longer)
ggplot(df)+
geom_line(aes(x=Date, y=value, color=name))
ggplot(df_longer)+
geom_line(aes(x=Date, y=value, color=name))
#Use ggplot
ggplot(df_longer)+
geom_line(aes(x=Date, y=value, color=name))+
theme_bw()
View(df)
#Compare ACFs
ts_df<- ts(df[,2:4], frequency = 12, start = c(1973, 2))
for (i in 2:4){
par(mfrow=c(1,3))
Acf(ts_df[,i], lag.max = 40, ylim=c(-0.5,1),
main = paste0(" ACF"))
}
View(ts_df)
for (i in 1:3){
par(mfrow=c(1,3))
Acf(ts_df[,i], lag.max = 40, ylim=c(-0.5,1),
main = paste0(" ACF"))
}
for (i in 1:3){
Acf(ts_df[,i], lag.max = 40, ylim=c(-0.5,1))
}
for (i in 1:3){
Acf(ts_df[,i], lag.max = 40, ylim=c(-0.5,1))
}
name = colnames(ts_df)
for (i in 1:3){
Acf(ts_df[,i], lag.max = 40, ylim=c(-0.5,1), main=name[i])
}
smktest<- SeasonalMannKendall(ts_df[,1])
View(smktest)
print(summary(smktest))
?SeasonalMannKendall
adftest<- adf.test(ts_df[,1],alternative = "stationary")
print(adftest)
par(mfrow=c(1,2))
plot(detrend_TRE, type ="l")
plot(diffy_tot_renewable_energy, type = "l")
TREP_matrix <- matrix(ts_df[,1],byrow=FALSE,nrow=12)
?byrow
??byrow
View(Tot_renewable_energy)
ts_TREP<- ts(table_10.1[,2], frequency = 12, start =c(1973,2))
TREP_matrix <- matrix(ts_TREP[,1],byrow=FALSE,nrow=12)
View(TREP_matrix)
TREP_matrix <- matrix(ts_TREP,byrow=FALSE,nrow=12)
knitr::opts_chunk$set(echo = TRUE,tidy.opts=list(width.cutoff=80), tidy=FALSE)
iHP=1
#Group data in yearly steps instances
inflow_data_matrix <- matrix(ts_inflow_data[,iHP],byrow=FALSE,nrow=12)
library(lubridate)
library(ggplot2)
library(forecast)
library(Kendall)
library(tseries)
#Importing time series data from text file#
raw_inflow_data <- read.table(file="./Data/inflowtimeseries.txt",header=FALSE,skip=0)
#Importing time series data from text file#
raw_inflow_data <- read.table(file="../Data/inflowtimeseries.txt",header=FALSE,skip=0)
#Trim the table to include only columns you need
nhydro <- ncol(raw_inflow_data)-2
nobs <- nrow(raw_inflow_data)
#If your file does not have header like this one you can add column names after
#creating the data frame
colnames(raw_inflow_data)=c("Month","Year", "HP1", "HP2","HP3","HP4", "HP5",
"HP6","HP7", "HP8","HP9","HP10", "HP11","HP12",
"HP13", "HP14","HP15")
#Checking data
head(raw_inflow_data)
str(raw_inflow_data)
#using package lubridate
my_date <- paste(raw_inflow_data[,1],raw_inflow_data[,2],sep="-")
my_date <- my(my_date)  #function my from package lubridate
head(my_date)
#add that to inflow_data and store in a new data frame
inflow_data <- cbind(my_date,raw_inflow_data[,3:(3+nhydro-1)])
head(inflow_data)
#using package ggplot2
for(i in 1:nhydro){
print(ggplot(inflow_data, aes(x=my_date, y=inflow_data[,(1+i)])) +
geom_line(color="blue") +
ylab(paste0("Inflow ",colnames(inflow_data)[(1+i)],sep=""))
)
}
#check the final obs on data
tail(inflow_data)
#Remove last for rows by replacing current data frame
inflow_data <- inflow_data[1:(nobs-12),]
#update object with number of observations
nobs <- nobs-12
#Tail again to check if the rows were correctly removed
tail(inflow_data)
ts_inflow_data <- ts(inflow_data[,2:(2+nhydro-1)],frequency=12)
#note that we are only transforming columns with inflow data, not the date columns  #start=my_date[1],end=my_date[nobs],
head(ts_inflow_data,15)
#Acf and Pacf for HP1
for(i in 1:nhydro){
par(mfrow=c(1,2))  #place plot side by side
Acf(ts_inflow_data[,i],lag.max=40,main=paste("Inflows HP",i,sep=""))
# because I am not storing Acf() into any object, I don't need to specify plot=TRUE
Pacf(ts_inflow_data[,i],lag.max=40,main=paste("Inflows HP",i,sep=""))
}
ts_inflow_data <- as.ts(ts_inflow_data[1:960,])
my_date <- my_date[1:960]
#create new df
inflow_data_new <- cbind(my_date, ts_inflow_data)
#note that there are more elegant ways to do that using filter function from package dplyr
#Let me know if you would like to learn how to use them
View(Tot_renewable_energy)
ts_TREP<- ts(table_10.1[,2], frequency = 12, start =c(1973,2), end = c(2022,2))
TREP_matrix <- matrix(ts_TREP,byrow=FALSE,nrow=12)
ts_TREP<- ts(table_10.1[,2], frequency = 12, start =c(1973,2), end = c(2022,3))
ts_TREP
TREP_matrix <- matrix(ts_TREP,byrow=FALSE,nrow=12)
View(TREP_matrix)
View(inflow_data)
ts_TREP<- ts(table_10.1[,2], frequency = 12, start =c(1973,2), end = c(2022,2))
View(ts_inflow_data)
View(ts_df)
View(ts_inflow_data)
View(df)
ts_df<- ts(ts_df[1:588,])
View(ts_df)
View(ts_df)
TREP_matrix <- matrix(ts_df[1],byrow=FALSE,nrow=12)
#Group data in yearly steps instances
inflow_data_matrix <- matrix(ts_inflow_data[,iHP],byrow=FALSE,nrow=12)
View(inflow_data_matrix)
View(ts_inflow_data)
TREP_matrix <- matrix(ts_df[,1],byrow=FALSE,nrow=12)
View(ts_df)
ts_TREP<- ts(table_10.1[,2], frequency = 12, start =c(1973,2), end = c(2022,1))
TREP_matrix <- matrix(ts_TREP,byrow=FALSE,nrow=12)
View(table_10.1)
ts_TREP<- ts(table_10.1[,5], frequency = 12, start =c(1973,2), end = c(2022,1))
TREP_matrix <- matrix(ts_TREP,byrow=FALSE,nrow=12)
ts_TREP<- ts(table_10.1[,5], frequency = 12, start =c(1973,1), end = c(2021,12))
TREP_matrix <- matrix(ts_TREP,byrow=FALSE,nrow=12)
TREP_yearly<- colMeans(TREP_matrix)
TREP_yearly
print(summary(MannKendall(TREP_yearly)))
library(dplyr)  #move this to package chunk later
my_year <- c(year(first(my_date)):year(last(my_date)))
View(table_10.1)
my_year<- [1973:2021]
my_year<- c(1973:2021)
sp_rho=cor(TREP_yearly,my_year,method="spearman")
print(sp_rho)
print(adf.test(TREP_yearly, alternative = "stationary"))
print(summary(MannKendall(TREP_yearly)))
print(sp_rho)
print(adf.test(TREP_yearly, alternative = "stationary"))
adftest<- adf.test(ts_df[,1],alternative = "stationary")
print(adftest)
print(summary(MannKendall(TREP_yearly)))
diffy_tot_renewable_energy<- diff(Tot_renewable_energy$Total.Renewable.Energy.Production, lag = 1, differences = 1)
plot(diffy_tot_renewable_energy, type = "l")
par(mfrow=c(1,2))
plot(detrend_TRE, type ="l")
plot(diffy_tot_renewable_energy, type = "l")
df_longer<- pivot_longer(df, cols = c("Total.Renewable.Energy", "Detrend", "Diffy"))
#Use ggplot
ggplot(df_longer)+
geom_line(aes(x=Date, y=value, color=name))+
theme_bw()
Acf(ts_df[,i], lag.max = 40, ylim=c(-0.5,1), main=name[i])
for (i in 1:3){
Acf(ts_df[,i], lag.max = 40, ylim=c(-0.5,1), main=name[i])
}
for (i in 1:3){
par(mfrow=c(1,3))
Acf(ts_df[,i], lag.max = 40, ylim=c(-0.5,1), main=name[i])
}
for (i in 1:3){
Acf(ts_df[,i], lag.max = 40, ylim=c(-0.5,1), main=name[i])
}
#Use ggplot
ggplot(df_longer)+
geom_line(aes(x=Date, y=value, color=name))+
theme_bw()
for (i in 1:3){
Acf(ts_df[,i], lag.max = 40, ylim=c(-0.5,1), main=name[i])
}
par(mfrow=c(1,2))
plot(detrend_TRE, type ="l")
plot(diffy_tot_renewable_energy, type = "l")
for (i in 1:3){
Acf(ts_df[,i], lag.max = 40, ylim=c(-0.5,1), main=name[i])
}
par(mfrow=c(1,3))
for (i in 1:3){
Acf(ts_df[,i], lag.max = 40, ylim=c(-0.5,1), main=name[i])
}
par(mfrow=c(1,2))
plot(detrend_TRE, type ="l")
plot(diffy_tot_renewable_energy, type = "l")
#Use ggplot
ggplot(df_longer)+
geom_line(aes(x=Date, y=value, color=name))+
theme_bw()
library(ggplot2)
#Use ggplot
ggplot(df_longer)+
geom_line(aes(x=Date, y=value, color=name))+
theme_bw()
for (i in 1:3){
Acf(ts_df[,i], lag.max = 40, ylim=c(-0.5,1), main=name[i])
}
#Load/install required package here
library(readxl)
library(ggplot2)
library(forecast)
library(tseries)
library(Kendall)
library(lubridate)
library(tidyverse)
for (i in 1:3){
Acf(ts_df[,i], lag.max = 40, ylim=c(-0.5,1), main=name[i])
}
par(mfrow=c(1,3))
for (i in 1:3){
Acf(ts_df[,i], lag.max = 40, ylim=c(-0.5,1), main=name[i])
}
smktest<- SeasonalMannKendall(ts_df[,1])
print(summary(smktest))
#Load/install required package here
library(xlsx)
#Load/install required package here
install.packages("xlsx")
#Load/install required package here
#install.packages("xlsx")
library(xlsx)
#Load/install required package here
#install.packages("xlsx")
library(readxl)
install.packages("openlsx")
install.packages("openxlsx")
library(openxlsx)
#Load/install required package here
#install.packages("xlsx")
#library(readxl)
#install.packages("openxlsx")
library(openxlsx)
library(forecast)
library(tseries)
library(ggplot2)
library(Kendall)
library(lubridate)
library(tidyverse)  #load this package so yon clean the data frame using pipes
#Importing data set - using xlsx package
energy_data <- read.xlsx(file="./Data/Table_10.1_Renewable_Energy_Production_and_Consumption_by_Source.xlsx",header=FALSE,startRow = 13,sheetIndex=1) #startRow is equivalent to skip on read.table
#Importing data set - using xlsx package
energy_data <- read.xlsx(file="../Data/Table_10.1_Renewable_Energy_Production_and_Consumption_by_Source.xlsx",header=FALSE,startRow = 13,sheetIndex=1) #startRow is equivalent to skip on read.table
#Importing data set - using xlsx package
energy_data <- read.xlsx(file="../Data/Table_10.1_Renewable_Energy_Production_and_Consumption_by_Source.xlsx",header=FALSE,startRow = 13,sheetIndex=1) #startRow is equivalent to skip on read.table
#Importing data set - using xlsx package
energy_data <- read.xlsx(file="./Data/Table_10.1_Renewable_Energy_Production_and_Consumption_by_Source.xlsx",header=FALSE,startRow = 13,sheetIndex=1) #startRow is equivalent to skip on read.table
#Importing data set - using xlsx package
energy_data <- openXL(file="./Data/Table_10.1_Renewable_Energy_Production_and_Consumption_by_Source.xlsx",header=FALSE,startRow = 13,sheetIndex=1) #startRow is equivalent to skip on read.table
#Importing data set - using xlsx package
energy_data <- read_excel(file="./Data/Table_10.1_Renewable_Energy_Production_and_Consumption_by_Source.xlsx",header=FALSE,startRow = 13,sheetIndex=1) #startRow is equivalent to skip on read.table
#Importing data set - using xlsx package
energy_data <- read_excel(file="../Data/Table_10.1_Renewable_Energy_Production_and_Consumption_by_Source.xlsx",header=FALSE,startRow = 13,sheetIndex=1) #startRow is equivalent to skip on read.table
#Importing data set - using xlsx package
energy_data <- read_excel(file="./Data/Table_10.1_Renewable_Energy_Production_and_Consumption_by_Source.xlsx",header=FALSE,startRow = 13,sheetIndex=1) #startRow is equivalent to skip on read.table
?read_excel
#Importing data set - using xlsx package
energy_data <- read_excel(file="./Data/Table_10.1_Renewable_Energy_Production_and_Consumption_by_Source.xlsx",startRow = 13,sheetIndex=1) #startRow is equivalent to skip on read.table
#Importing data set - using xlsx package
energy_data <- read_excel(file="./Data/Table_10.1_Renewable_Energy_Production_and_Consumption_by_Source.xlsx",col_names = FALSE,skip = 13,sheet=1) #startRow is equivalent to skip on read.table
#Importing data set - using xlsx package
energy_data <- read_excel(file="../Data/Table_10.1_Renewable_Energy_Production_and_Consumption_by_Source.xlsx",col_names = FALSE,skip = 13,sheet=1) #startRow is equivalent to skip on read.table
#Importing data set - using xlsx package
energy_data <- read_excel("../Data/Table_10.1_Renewable_Energy_Production_and_Consumption_by_Source.xlsx",col_names = FALSE,skip = 13,sheet=1) #startRow is equivalent to skip on read.table
#Importing data set - using xlsx package
getwd()
energy_data <- read_excel("Data/Table_10.1_Renewable_Energy_Production_and_Consumption_by_Source.xlsx",col_names = FALSE,skip = 13,sheet=1) #startRow is equivalent to skip on read.table
View(energy_data)
#Now let's extract the column names from row 11 only
read_col_names <- read.xlsx("/Data/Table_10.1_Renewable_Energy_Production_and_Consumption_by_Source.xlsx",header=FALSE,startRow = 11,endRow=11,sheetIndex=1)
energy_data <- read_excel("Data/Table_10.1_Renewable_Energy_Production_and_Consumption_by_Source.xlsx",col_names = TRUE,skip = 13,sheet=1) #startRow is equivalent to skip on read.table
View(energy_data)
energy_data <- read_excel("Data/Table_10.1_Renewable_Energy_Production_and_Consumption_by_Source.xlsx",col_names = FALSE,skip = 11,sheet=1) #startRow is equivalent to skip on read.table
View(energy_data)
energy_data<- read.table(file= "./Data/Table_10.1_Renewable_Energy_Production_and_Consumption_by_Source-Edit.csv",
header=TRUE,dec = ".",sep=",",stringsAsFactors = TRUE)
View(energy_data)
knitr::opts_chunk$set(echo = TRUE,tidy.opts=list(width.cutoff=80), tidy=FALSE)
library(lubridate)
library(ggplot2)
library(forecast)
library(Kendall)
library(tseries)
library(outliers)
library(tidyverse)
#New packages for M5
#install.packages("cowplot")
library(cowplot)
#New packages for M5
install.packages("cowplot")
library(cowplot)
#Importing time series data from text file#
electricity_price <- read.csv(file="./Data/Average_retail_price_of_electricity_United_States_monthly.csv",header=TRUE,skip=4)
#Inspect data
head(electricity_price)
nvar <- ncol(electricity_price) - 1
nobs <- nrow(electricity_price)
head(electricity_price)
summary(electricity_price)
#Initial plot
#With plot function
plot(electricity_price$residential.cents.per.kilowatthour, type ="l")
View(electricity_price)
#Note the time is reversed on this plot. Price should be increasing over time
#Preparing the data - create date object and rename columns
electricity_price_processed <-
electricity_price %>%
mutate( Month = my(Month) ) %>%
rename( All.sectors = all.sectors.cents.per.kilowatthour ) %>%
rename( Residential = residential.cents.per.kilowatthour ) %>%
rename( Commercial = commercial.cents.per.kilowatthour ) %>%
rename( Industrial = industrial.cents.per.kilowatthour )
View(electricity_price_processed)
#but lets fix it!
electricity_price_processed <-
electricity_price_processed %>%
arrange(Month)
#Generating a box plot by factor where factor is month of the year
TS_Plot <-
ggplot(electricity_price_processed, aes(x=Month, y=Residential)) +
geom_line()
plot(TS_Plot)
ts_electricity_price <- ts(electricity_price_processed[,2:(nvar+1)],
start=c(year(electricity_price_processed$Month[1]),
month(electricity_price_processed$Month[1])),
frequency=12)
#note that we are only transforming columns with electricity price, not the date columns
head(ts_electricity_price,15)
tail(ts_electricity_price,15)
#ACF and PACF plots
par(mar=c(3,3,3,0)) #changing plot window dimensions
ACF_Plot <- Acf(electricity_price_processed$Residential, lag = 40,
main = "ACF Residential Electricity Price")
PACF_Plot <- Pacf(electricity_price_processed$Residential, lag = 40,
main = "PACF Residential Electricity Price")
ACF_Plot <- Acf(electricity_price_processed$Residential, lag = 40,
main = "ACF Residential Electricity Price")
#Using R decompose function
decompose_residential_price <- decompose(ts_electricity_price[,"Residential"],"additive")
plot(decompose_residential_price)
#Creating non-seasonal residential price time series
deseasonal_residential_price <- seasadj(decompose_residential_price)
df_residential <- data.frame( Month = electricity_price_processed$Month,
Residential = electricity_price_processed$Residential,
NonSeasonalResidential = as.numeric(deseasonal_residential_price))
ggplot(df_residential, aes(x=Month)) +
geom_line(aes(x=Month,y=Residential),color="black") +
geom_line(aes(x=Month,y=NonSeasonalResidential),color="blue")
#Comparing ACFs
par(mar=c(3,3,3,0));par(mfrow=c(1,2))
Acf(df_residential$Residential,lag.max=40,main="Residential")
Acf(df_residential$NonSeasonalResidential,lag.max=40,main="Non Sesonal Residential")
#Comparing PACFs
par(mar=c(3,3,3,0));par(mfrow=c(1,2))
Pacf(df_residential$Residential,lag.max=40,main="Residential")
Pacf(df_residential$NonSeasonalResidential,lag.max=40,main="Non Sesonal Residential")
#Run ADF
#adf.test(deseasonal_price,alternative="stationary")
print((adf.test(deseasonal_residential_price,alternative="stationary")))
#Note that p-value greater then 0.05 so we accept H0. Data has stochastic trend
#Lets difference the series to remove the trend.
#Difference the data at lag 1
deseasonal_residential_price_diff <- diff(deseasonal_residential_price,differences=1)
#Add the new series to our data frame
df_residential_full <-
df_residential %>%
cbind(ResidentialDiff = c(NA,as.numeric(deseasonal_residential_price_diff))) %>%
na.omit(residentialDiff)
par(mar=c(3,3,3,0));par(mfrow=c(1,3))
Acf(df_residential_full$Residential,lag.max=40,main="Residential",ylim=c(-.2,1))
Acf(df_residential_full$NonSeasonalResidential,lag.max=40,main="Non Sesonal Residential",ylim=c(-.2,1))
Acf(df_residential_full$ResidentialDiff,lag.max=40,main="Diff NonSeas Residential",ylim=c(-.2,1))
par(mar=c(3,3,3,0));par(mfrow=c(1,3))
Pacf(df_residential_full$Residential,lag.max=40,main="Residential",ylim=c(-.2,1))
Pacf(df_residential_full$NonSeasonalResidential,lag.max=40,main="Non Sesonal Residential",ylim=c(-.2,1))
Pacf(df_residential_full$ResidentialDiff,lag.max=40,main="Diff NonSeas Residential",ylim=c(-.2,1))
Model_111 <- Arima(deseasonal_residential_price,order=c(1,1,1),include.drift=TRUE)
print(Model_111)
compare_aic <- data.frame(Model_111$aic)
par(mar=c(3,3,3,0));par(mfrow=c(1,3))
ts.plot(Model_111$residuals)
Acf(Model_111$residuals,lag.max=40)
Pacf(Model_111$residuals,lag.max=40)
Model_011 <- Arima(deseasonal_residential_price,order=c(0,1,1),include.drift=TRUE)
print(Model_011)
compare_aic <- data.frame(compare_aic,Model_011$aic)
compare_aic
par(mar=c(3,3,3,0));par(mfrow=c(1,3))
ts.plot(Model_011$residuals)
Acf(Model_011$residuals,lag.max=40)
Pacf(Model_011$residuals,lag.max=40)
Model_211 <- Arima(deseasonal_residential_price,order=c(2,1,1),include.drift=TRUE)
print(Model_211)
compare_aic <- data.frame(compare_aic,Model_211$aic)
compare_aic
par(mar=c(3,3,3,0));par(mfrow=c(1,3))
ts.plot(Model_211$residuals)
Acf(Model_211$residuals,lag.max=40)
Pacf(Model_211$residuals,lag.max=40)
Model_112 <- Arima(deseasonal_residential_price,order=c(1,1,2),include.drift=TRUE)
print(Model_112)
compare_aic <- data.frame(compare_aic,Model_112$aic)
compare_aic
par(mar=c(3,3,3,0));par(mfrow=c(1,3))
ts.plot(Model_112$residuals)
Acf(Model_112$residuals,lag.max=40)
Pacf(Model_112$residuals,lag.max=40)
Model_212 <- Arima(deseasonal_residential_price,order=c(2,1,2),include.drift=TRUE)
print(Model_212)
compare_aic <- data.frame(compare_aic,Model_212$aic)
compare_aic
par(mar=c(3,3,3,0));par(mfrow=c(1,3))
ts.plot(Model_212$residuals)
Acf(Model_212$residuals,lag.max=40)
Pacf(Model_212$residuals,lag.max=40)
Model_autofit <- auto.arima(deseasonal_residential_price,max.D=0,max.P = 0,max.Q=0)
print(Model_autofit)
Model_101 <- Arima(deseasonal_residential_price,order=c(1,0,1))
df_models <- data.frame(
date = electricity_price_processed$Month,
observed = as.numeric(deseasonal_residential_price),
ARIMA_111 = as.numeric(Model_111$fitted),
ARIMA_011 = as.numeric(Model_011$fitted),
ARIMA_auto = as.numeric(Model_autofit$fitted),
ARIMA_211 = as.numeric(Model_211$fitted)
)
Plot1 <-
ggplot(df_models) +
geom_line(aes(x=date,y=observed),color="black") +
geom_line(aes(x=date,y=ARIMA_111),color="red")
Plot2 <-
ggplot(df_models) +
geom_line(aes(x=date,y=observed),color="black") +
geom_line(aes(x=date,y=ARIMA_011),color="blue")
Plot3 <-
ggplot(df_models) +
geom_line(aes(x=date,y=observed),color="black") +
geom_line(aes(x=date,y=ARIMA_auto),color="green")
Plot4 <-
ggplot(df_models) +
geom_line(aes(x=date,y=observed),color="black") +
geom_line(aes(x=date,y=ARIMA_211),color="orange")
cowplot::plot_grid(Plot1,Plot2,Plot3,Plot4,nrow=2)
