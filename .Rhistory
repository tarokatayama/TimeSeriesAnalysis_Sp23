View(ts_table_10.1)
View(table_10.1)
ggplot(table_10.1, aes(x=date, y=Total.Biomass.Energy.Production)) +
geom_line(color="blue")+ geom_line(aes(y= mean(Total.Biomass.Energy.Production)), color = "red")+
xlab("Date")+ ylab("Total Biomass Energy Production")+
theme_bw()
library(forecast)
#install.packages("tseries")
#install.packages("dplyr")
library(dplyr)
library(tseries)
library(lubridate)
library(ggplot2)
ggplot(table_10.1, aes(x=date, y=Total.Biomass.Energy.Production)) +
geom_line(color="blue")+ geom_line(aes(y= mean(Total.Biomass.Energy.Production)), color = "red")+
xlab("Date")+ ylab("Total Biomass Energy Production")+
theme_bw()
View(table_10.1)
ggplot(table_10.1, aes(x=date, y=Total.Biomass.Energy.Production)) +
geom_line(color="blue")+ geom_line(aes(y= mean(Total.Biomass.Energy.Production)), color = "red")+
xlab("Date")+ ylab("Total Biomass Energy Production")+ title("Total Biomass Energy Production (1973-2022)")+
theme_bw()
?ggplot
ggplot(table_10.1, aes(x=date, y=Total.Biomass.Energy.Production)) +
geom_line(color="blue")+ geom_line(aes(y= mean(Total.Biomass.Energy.Production)), color = "red")+
xlab("Date")+ ylab("Total Biomass Energy Production")+ ggtitle("Total Biomass Energy Production (1973-2022)")+
theme_bw()
ggplot(table_10.1, aes(x=date, y=Total.Biomass.Energy.Production)) +
geom_line(color="blue")+ geom_line(aes(y= mean(Total.Biomass.Energy.Production)), color = "red")+
xlab("Date")+ ylab("Total Biomass Energy Production")+ ggtitle("Total Biomass Energy Production (Jan 1973- Sep 2022)")+
theme_bw()
ggplot(table_10.1, aes(x=date, y=Total.Renewable.Energy.Production)) +
geom_line(color="blue")+ geom_line(aes(y= mean(Total.Renewable.Energy.Production)), color = "purple")+
xlab("Date")+ ylab("Total Renewable Energy Production")++ ggtitle("Total Renewable Energy Production (Jan 1973- Sep 2022)")+
theme_bw()
ggplot(table_10.1, aes(x=date, y=Total.Renewable.Energy.Production)) +
geom_line(color="blue")+ geom_line(aes(y= mean(Total.Renewable.Energy.Production)), color = "purple")+
xlab("Date")+ ylab("Total Renewable Energy Production")++ ggtitle("Total Renewable Energy Production (Jan 1973- Sep 2022)")+
theme_bw()
ggplot(table_10.1, aes(x=date, y=Total.Renewable.Energy.Production)) +
geom_line(color="blue")+ geom_line(aes(y= mean(Total.Renewable.Energy.Production)), color = "purple")+
xlab("Date")+ ylab("Total Renewable Energy Production")+ ggtitle("Total Renewable Energy Production (Jan 1973- Sep 2022)")+
theme_bw()
ggplot(table_10.1, aes(x=date, y=Hydroelectric.Power.Consumption)) +
geom_line(color="blue")+ geom_line(aes(y= mean(Hydroelectric.Power.Consumption)), color = "green")+
xlab("Date")+ ylab("Hydroelectric Power Consumption")+ ggtitle("Hydroelectric Power Consumption (Jan 1973- Sep 2022)")+
theme_bw()
ggplot(table_10.1, aes(x=date, y=Total.Biomass.Energy.Production)) +
geom_line(color="blue")+ geom_line(aes(y= mean(Total.Biomass.Energy.Production)), color = "red")+
xlab("Date")+ ylab("Total Biomass Energy Production")+ ggtitle("Total Biomass Energy Production (Jan 1973- Sep 2022)")+
theme_bw()
mean(ts_table_10.1[,1])
ggplot(table_10.1, aes(x=date, y=Total.Renewable.Energy.Production)) +
geom_line(color="blue")+ geom_line(aes(y= mean(Total.Renewable.Energy.Production)), color = "purple")+
xlab("Date")+ ylab("Total Renewable Energy Production")+ ggtitle("Total Renewable Energy Production (Jan 1973- Sep 2022)")+
theme_bw()
mean(ts_table_10.1[,2])
ggplot(table_10.1, aes(x=date, y=Total.Biomass.Energy.Production)) +
geom_line(color="blue")+ geom_line(aes(y= mean(Total.Biomass.Energy.Production)), color = "red")+
xlab("Date")+ ylab("Total Biomass Energy Production")+ ggtitle("Total Biomass Energy Production (Jan 1973- Sep 2022)")+
theme_bw()
ggplot(table_10.1, aes(x=date, y=Hydroelectric.Power.Consumption)) +
geom_line(color="blue")+ geom_line(aes(y= mean(Hydroelectric.Power.Consumption)), color = "green")+
xlab("Date")+ ylab("Hydroelectric Power Consumption")+ ggtitle("Hydroelectric Power Consumption (Jan 1973- Sep 2022)")+
theme_bw()
mean(ts_table_10.1[,3])
cor.test(ts_table_10.1[,1], ts_table_10.1[,2])
cor.test(ts_table_10.1[,2], ts_table_10.1[,3])
acf(ts_table_10.1[,3], lag.max = 40)
acf(ts_table_10.1[,1],lag.max = 40)
ts_table_10.1<- ts(table_10.1[,2:4], start = 1, end = 597, frequency = 12)
mean(ts_table_10.1[,1])
sd(ts_table_10.1[,1])
mean(ts_table_10.1[,2])
sd(ts_table_10.1[,2])
mean(ts_table_10.1[,3])
sd(ts_table_10.1[,3])
```
ggplot(table_10.1, aes(x=date, y=Total.Biomass.Energy.Production)) +
geom_line(color="blue")+ geom_line(aes(y= mean(Total.Biomass.Energy.Production)), color = "red")+
xlab("Date")+ ylab("Total Biomass Energy Production")+ ggtitle("Total Biomass Energy Production (Jan 1973- Sep 2022)")+
theme_bw()
ggplot(table_10.1, aes(x=date, y=Total.Renewable.Energy.Production)) +
geom_line(color="blue")+ geom_line(aes(y= mean(Total.Renewable.Energy.Production)), color = "purple")+
xlab("Date")+ ylab("Total Renewable Energy Production")+ ggtitle("Total Renewable Energy Production (Jan 1973- Sep 2022)")+
theme_bw()
ggplot(table_10.1, aes(x=date, y=Hydroelectric.Power.Consumption)) +
geom_line(color="blue")+ geom_line(aes(y= mean(Hydroelectric.Power.Consumption)), color = "green")+
xlab("Date")+ ylab("Hydroelectric Power Consumption")+ ggtitle("Hydroelectric Power Consumption (Jan 1973- Sep 2022)")+
theme_bw()
cor.test(ts_table_10.1[,1], ts_table_10.1[,2])
cor(ts_table_10.1[, c(1,2,3)])
cor.test(ts_table_10.1[,1], ts_table_10.1[,2])
acf(ts_table_10.1[,1],lag.max = 40)
acf(ts_table_10.1[,2],lag.max = 40)
acf(ts_table_10.1[,3], lag.max = 40)
#total biomass production and total renewable energy production are significantly correlated,
#with cor=0.919, and p value of < 0.05. Since biomass is a renewable energy source, the rise in biomass production also relates to total renewable energy production. However, just because these two variables are correlated, it does not mean that the rise in total renewable energy is caused by a rise in biomass production.
cor.test(ts_table_10.1[,2], ts_table_10.1[,3])
#there is a slight negative correlation between total renewable energy production and
#hydroelectric power consumption of -0.097. This correlation is
#significant with a p value of <0.05.
cor.test(ts_table_10.1[,1], ts_table_10.1[,3])
knitr::opts_chunk$set(echo = TRUE,tidy.opts=list(width.cutoff=80), tidy=FALSE)
library(lubridate)
library(ggplot2)
library(forecast)
library(Kendall)
library(tseries)
#Importing time series data from text file#
raw_inflow_data <- read.table(file="../Data/inflowtimeseries.txt",header=FALSE,skip=0)
#Trim the table to include only columns you need
nhydro <- ncol(raw_inflow_data)-2
nobs <- nrow(raw_inflow_data)
#If your file does not have header like this one you can add column names after
#creating the data frame
colnames(raw_inflow_data)=c("Month","Year", "HP1", "HP2","HP3","HP4", "HP5",
"HP6","HP7", "HP8","HP9","HP10", "HP11","HP12",
"HP13", "HP14","HP15")
#Checking data
head(raw_inflow_data)
str(raw_inflow_data)
#using package lubridate
my_date <- paste(raw_inflow_data[,1],raw_inflow_data[,2],sep="-")
my_date <- my(my_date)  #function my from package lubridate
head(my_date)
#add that to inflow_data and store in a new data frame
inflow_data <- cbind(my_date,raw_inflow_data[,3:(3+nhydro-1)])
head(inflow_data)
#using package ggplot2
for(i in 1:nhydro){
print(ggplot(inflow_data, aes(x=my_date, y=inflow_data[,(1+i)])) +
geom_line(color="blue") +
ylab(paste0("Inflow ",colnames(inflow_data)[(1+i)],sep=""))
)
}
#check the final obs on data
tail(inflow_data)
#Remove last year by replacing current data frame
inflow_data <- inflow_data[1:(nobs-412),]
#update object with number of observations
nobs <- nobs-12
#Tail again to check if the rows were correctly removed
tail(inflow_data)
View(inflow_data)
inflow_data_ts<- ts(inflow_data[2:nhydro],)
View(inflow_data_ts)
inflow_data_ts<- ts(inflow_data[2:nhydro+1],)
Acf(inflow_data_ts)
## Plotting ACF and PACF
inflow_data_ts<- ts(inflow_data[,2:nhydro+1])
inflow_data_ts<- ts(inflow_data[,2:nhydro+1])
inflow_data_ts<- ts(inflow_data[,2:nhydro+1], frequency = 12)
head(inflow_data_ts)
inflow_data_ts<- ts(inflow_data[,2:nhydro+1], frequency = 12, start=c(1931,1,1))
head(inflow_data_ts)
inflow_data_ts<- ts(inflow_data[,2:nhydro+1], frequency = 12, start=c(1931,1,1))
head(inflow_data_ts)
inflow_data_ts<- ts(inflow_data[,2:nhydro+1], frequency = 12, start=c(1931,1))
for(i in 1:hydro){
Acf(inflow_data_ts[,i],lag.max = 40)
Pacf(inflow_data_ts[,i],lag.max = 40)
}
for(i in 1:nhydro){
Acf(inflow_data_ts[,i],lag.max = 40)
Pacf(inflow_data_ts[,i],lag.max = 40)
}
for(i in 1:nhydro){
par(mfrow=c(1,2))
Acf(inflow_data_ts[,i],lag.max = 40, main=paste0("HP",i))
Pacf(inflow_data_ts[,i],lag.max = 40, main=paste0("HP",i))
}
for(i in 1:nhydro){
par(mfrow=c(1,2))
Acf(inflow_data_ts[,i],lag.max = 40, main=paste0("HP",i+1))
Pacf(inflow_data_ts[,i],lag.max = 40, main=paste0("HP",i+1))
}
for(i in 1:nhydro){
par(mfrow=c(1,2))
Acf(inflow_data_ts[,i],lag.max = 40, main=paste0("HP",i))
Pacf(inflow_data_ts[,i],lag.max = 40, main=paste0("HP",i))
}
#inflow_data_ts<- ts(inflow_data[,2:nhydro+1], frequency = 12, start=c(1931,1))
inflow_data_ts<- ts(inflow_data[,2:16], frequency = 12, start=c(1931,1))
for(i in 1:nhydro){
par(mfrow=c(1,2))
Acf(inflow_data_ts[,i],lag.max = 40, main=paste0("HP",i))
Pacf(inflow_data_ts[,i],lag.max = 40, main=paste0("HP",i))
}
acf(ts_table_10.1[,1],lag.max = 40)
acf(ts_table_10.1[,2],lag.max = 40)
acf(ts_table_10.1[,3], lag.max = 40)
acf(ts_table_10.1[,3], lag.max = 40)
for(i in 1:nhydro){
par(mfrow=c(1,2))
Acf(inflow_data_ts[,i],lag.max = 40, main=paste0("HP",i))
Pacf(inflow_data_ts[,i],lag.max = 40, main=paste0("HP",i))
}
#Create vector t
t <- 1:nobs
#Fit a linear trend to TS of iHP
?lm
iHP=4
#Fit a linear trend to TS of iHP
linear_trend <- lm(inflow_data[iHP+1] ~ t)
#Fit a linear trend to TS of iHP
linear_trend <- lm(inflow_data[,iHP+1] ~ t)
summary(linear_trend)
#Fit a linear trend to TS of iHP
linear_trend <- lm(inflow_data[,iHP+1] ~ t)
#Create vector t
t <- 1:nobs
iHP=4
#Fit a linear trend to TS of iHP
linear_trend <- lm(inflow_data[,iHP+1] ~ t)
#Fit a linear trend to TS of iHP
linear_trend <- lm(inflow_data[,5] ~ t)
#Fit a linear trend to TS of iHP
linear_trend <- lm(inflow_data[,iHP+1]~ t)
#Create vector t
t <- 1:nobs
#Fit a linear trend to TS of iHP
linear_trend <- lm(inflow_data[,iHP+1]~ t)
#Create vector t
t <- 1:956
#Fit a linear trend to TS of iHP
linear_trend <- lm(inflow_data[,iHP+1]~ t)
#Create vector t
t <- 1:960
#Create vector t
t <- 1:560
#Fit a linear trend to TS of iHP
linear_trend <- lm(inflow_data[,iHP+1]~ t)
summary(linear_trend)
#Remove last year by replacing current data frame
inflow_data <- inflow_data[1:(nobs-12),]
#Create vector t
t <- 1:nobs
#Fit a linear trend to TS of iHP
linear_trend <- lm(inflow_data[,iHP+1]~ t)
#update object with number of observations
nobs <- nobs-12
#Tail again to check if the rows were correctly removed
tail(inflow_data)
#Create vector t
t <- 1:nobs
#Fit a linear trend to TS of iHP
linear_trend <- lm(inflow_data[,iHP+1]~ t)
summary(linear_trend)
ggplot(inflow_data,aes(x=my_date,y=inflow_data[,ihp+1]))+
geom_smooth(method= "lm", color = "red")
knitr::opts_chunk$set(echo = TRUE,tidy.opts=list(width.cutoff=80), tidy=FALSE)
#Load/install required package here
library(forecast)
library(tseries)
library(lubridate)
library(Kendall)
#Importing data set
table_10.1<- read.table(file= "./Data/Table_10.1_Renewable_Energy_Production_and_Consumption_by_Source-Edit.csv",
header=TRUE,dec = ".",sep=",",stringsAsFactors = TRUE)
View(table_10.1)
table_10.1<- table_10.1[, c("Month", "Total.Biomass.Energy.Production", "Total.Renewable.Energy.Production", "Hydroelectric.Power.Consumption")]
View(table_10.1)
date<- ym(table_10.1$Month)
table_10.1<-cbind(date, table_10.1[,2:4])
View(table_10.1)
```{r}
```{r}
View(table_10.1)
View(table_10.1)
ts_table_10.1 <- ts(table_10.1[,2:4], start = c(1973,1), end = 597, frequency = 12, )
table_10.1<- table_10.1[, c("Month", "Total.Biomass.Energy.Production", "Total.Renewable.Energy.Production", "Hydroelectric.Power.Consumption")]
table_10.1<- table_10.1[, c("Month", "Total.Biomass.Energy.Production", "Total.Renewable.Energy.Production", "Hydroelectric.Power.Consumption")]
#Importing data set
table_10.1<- read.table(file= "./Data/Table_10.1_Renewable_Energy_Production_and_Consumption_by_Source-Edit.csv",
header=TRUE,dec = ".",sep=",",stringsAsFactors = TRUE)
table_10.1<- table_10.1[, c("Month", "Total.Biomass.Energy.Production", "Total.Renewable.Energy.Production", "Hydroelectric.Power.Consumption")]
ts_table_10.1 <- ts(table_10.1[,2:4], start = c(1973,1), end = 597, frequency = 12 )
ts_table_10.1 <- ts(table_10.1[,2:4], frequency = 12, start = c(1973,1))
View(ts_table_10.1)
View(table_10.1)
#Importing data set
table_10.1<- read.table(file= "./Data/Table_10.1_Renewable_Energy_Production_and_Consumption_by_Source-Edit.csv",
header=TRUE,dec = ".",sep=",",stringsAsFactors = TRUE)
table_10.1<- table_10.1[, c("Month", "Total.Biomass.Energy.Production", "Total.Renewable.Energy.Production", "Hydroelectric.Power.Consumption")]
date<- ym(table_10.1$Month)
table_10.1<-cbind(date, table_10.1[,2:4])
ts_table_10.1 <- ts(table_10.1[,2:4], frequency = 12, start = c(1973,1))
View(ts_table_10.1)
```{r}
ts_table_10.1 <- ts(table_10.1[,2:4], frequency = 12, start = c(1973,1))
### Q1
Create a plot window that has one row and three columns. And then for each object on your data frame, fill the plot window with time series plot, ACF and PACF. You may use the some code form A2, but I want all three plots on the same window this time. (Hint: use par() function)
#Load/install required package here
library(forecast)
library(tseries)
library(lubridate)
library(Kendall)
#Importing data set
table_10.1<- read.table(file= "./Data/Table_10.1_Renewable_Energy_Production_and_Consumption_by_Source-Edit.csv",
header=TRUE,dec = ".",sep=",",stringsAsFactors = TRUE)
table_10.1<- table_10.1[, c("Month", "Total.Biomass.Energy.Production", "Total.Renewable.Energy.Production", "Hydroelectric.Power.Consumption")]
date<- ym(table_10.1$Month)
table_10.1<-cbind(date, table_10.1[,2:4])
ts_table_10.1 <- ts(table_10.1[,2:4], frequency = 12, start = c(1973,1))
### Q1
Create a plot window that has one row and three columns. And then for each object on your data frame, fill the plot window with time series plot, ACF and PACF. You may use the some code form A2, but I want all three plots on the same window this time. (Hint: use par() function)
```{r}
par(mfrow=c(1,3))
library(ggplot2)
par(mfrow=c(1,3))
ggplot(table_10.1, aes(x=date, y=Total.Biomass.Energy.Production)) +
geom_line(color="blue")+ geom_line(aes(y= mean(Total.Biomass.Energy.Production)), color = "red")+
xlab("Date")+ ylab("Total Biomass Energy Production")+ ggtitle("Total Biomass Energy Production (Jan 1973- Sep 2022)")+
theme_bw()
Acf(ts_table_10.1[,1], lag.max = 40)+ theme_bw()
Pacf(ts_table_10.1[,1], lag.max = 40)+ theme_bw()
ggplot(table_10.1, aes(x=date, y=Total.Biomass.Energy.Production)) +
geom_line(color="blue")+ geom_line(aes(y= mean(Total.Biomass.Energy.Production)), color = "red")+
xlab("Date")+ ylab("Total Biomass Energy Production")+ ggtitle("Total Biomass Energy Production (Jan 1973- Sep 2022)")+
theme_bw()
par(mfrow=c(1,3))
ggplot(table_10.1, aes(x=date, y=Total.Biomass.Energy.Production)) +
geom_line(color="blue")+ geom_line(aes(y= mean(Total.Biomass.Energy.Production)), color = "red")+
xlab("Date")+ ylab("Total Biomass Energy Production")+ ggtitle("Total Biomass Energy Production (Jan 1973- Sep 2022)")+
theme_bw()
Acf(ts_table_10.1[,1], lag.max = 40)+ theme_bw()
Pacf(ts_table_10.1[,1], lag.max = 40)+ theme_bw()
par(mfrow=c(1,2))
ggplot(table_10.1, aes(x=date, y=Total.Biomass.Energy.Production)) +
geom_line(color="blue")+ geom_line(aes(y= mean(Total.Biomass.Energy.Production)), color = "red")+
xlab("Date")+ ylab("Total Biomass Energy Production")+ ggtitle("Total Biomass Energy Production (Jan 1973- Sep 2022)")+
theme_bw()
Acf(ts_table_10.1[,1], lag.max = 40)+ theme_bw()
Pacf(ts_table_10.1[,1], lag.max = 40)+ theme_bw()
par(mfrow=c(1,4)
par(mfrow=c(1,2)
par(mfrow=c(1,2)
ggplot(table_10.1, aes(x=date, y=Total.Biomass.Energy.Production)) +
par(mfrow=c(1,4))
ggplot(table_10.1, aes(x=date, y=Total.Biomass.Energy.Production)) +
geom_line(color="blue")+ geom_line(aes(y= mean(Total.Biomass.Energy.Production)), color = "red")+
xlab("Date")+ ylab("Total Biomass Energy Production")+ ggtitle("Total Biomass Energy Production (Jan 1973- Sep 2022)")+theme_bw()
Acf(ts_table_10.1[,1], lag.max = 40)+ theme_bw()
Pacf(ts_table_10.1[,1], lag.max = 40)+ theme_bw()
par(mfrow=c(1,3))
Acf(ts_table_10.1[,1], lag.max = 40)+ theme_bw()
Pacf(ts_table_10.1[,1], lag.max = 40)+ theme_bw()
ggplot(table_10.1, aes(x=date, y=Total.Biomass.Energy.Production)) +
geom_line(color="blue")+ geom_line(aes(y= mean(Total.Biomass.Energy.Production)), color = "red")+
xlab("Date")+ ylab("Total Biomass Energy Production")+ ggtitle("Total Biomass Energy Production (Jan 1973- Sep 2022)")+theme_bw()
par(mfrow=c(1,3))
Acf(ts_table_10.1[,1], lag.max = 40)+ theme_bw()
Pacf(ts_table_10.1[,1], lag.max = 40)+ theme_bw()
plot(table_10.1$Total.Biomass.Energy.Production, table_10.1$date)
?plot
plot(table_10.1$date, table_10.1$Total.Biomass.Energy.Production)
Acf(ts_table_10.1[,1], lag.max = 40)+ theme_bw()
Pacf(ts_table_10.1[,1], lag.max = 40)+ theme_bw()
plot(table_10.1$date, table_10.1$Total.Biomass.Energy.Production)
par(mfrow=c(1,3))
Acf(ts_table_10.1[,1], lag.max = 40)+ theme_bw()
Pacf(ts_table_10.1[,1], lag.max = 40)+ theme_bw()
plot(table_10.1$date, table_10.1$Total.Biomass.Energy.Production)
ggplot(table_10.1, aes(x=date, y=Total.Biomass.Energy.Production))+ geom_line
ggplot(table_10.1, aes(x=date, y=Total.Biomass.Energy.Production))+ geom_line()
Acf(ts_table_10.1[,1], lag.max = 40)+ theme_bw()
Pacf(ts_table_10.1[,1], lag.max = 40)+ theme_bw()
ggplot(table_10.1, aes(x=date, y=Total.Biomass.Energy.Production))+ geom_line()
par(mfrow=c(1,3))
Acf(ts_table_10.1[,1], lag.max = 40)+ theme_bw()
Pacf(ts_table_10.1[,1], lag.max = 40)+ theme_bw()
ggplot(table_10.1, aes(x=date, y=Total.Biomass.Energy.Production))+ geom_line()
par(mfrow=c(1,3))
Acf(ts_table_10.1[,1], lag.max = 40)+ theme_bw()
Pacf(ts_table_10.1[,1], lag.max = 40)+ theme_bw()
ggplot(table_10.1, aes(x=date, y=Total.Biomass.Energy.Production))+ geom_line()
plot(table_10.1$date, table_10.1$Total.Biomass.Energy.Production, type = b, col= "blue")
plot(table_10.1$date, table_10.1$Total.Biomass.Energy.Production, type = l, col= "blue")
plot(table_10.1$date, table_10.1$Total.Biomass.Energy.Production,col= "blue")
plot(table_10.1$date, table_10.1$Total.Biomass.Energy.Production, type = "b", col= "blue")
plot(table_10.1$date, table_10.1$Total.Biomass.Energy.Production, type = "l", col= "blue")
Acf(ts_table_10.1[,1], lag.max = 40)+ theme_bw()
Pacf(ts_table_10.1[,1], lag.max = 40)+ theme_bw()
plot(table_10.1$date, table_10.1$Total.Biomass.Energy.Production, type = "l", col= "blue")
par(mfrow=c(1,3))
Acf(ts_table_10.1[,1], lag.max = 40)+ theme_bw()
Pacf(ts_table_10.1[,1], lag.max = 40)+ theme_bw()
plot(table_10.1$date, table_10.1$Total.Biomass.Energy.Production, type = "l", col= "blue")
plot(table_10.1$date, table_10.1$Total.Biomass.Energy.Production, type = "l", col= "blue")+ theme_bw()
plot(table_10.1$date, table_10.1$Total.Biomass.Energy.Production, type = "l", col= "blue", xlab = "date", ylab = "Total Renewable Energy Production")+ theme_bw()
Acf(ts_table_10.1[,1], lag.max = 40)+ theme_bw()
Acf(ts_table_10.1[,1], lag.max = 40)+ theme_bw()
Pacf(ts_table_10.1[,1], lag.max = 40)+ theme_bw()
plot(table_10.1$date, table_10.1$Total.Biomass.Energy.Production, type = "l", col= "blue", xlab = "date", ylab = "Total Renewable Energy Production")+ theme_bw()
name=colnames(table_10.1)
for (i in 1:4){
par(mfrow=c(1,3))
Acf(ts_table_10.1[,i], lag.max = 40)
Pacf(ts_table_10.1[,i], lag.max = 40)
plot(table_10.1$date, table_10.1$name[i], type = "l", col= "blue")
}
for (i in 1:4){
par(mfrow=c(1,3))
Acf(ts_table_10.1[,i], lag.max = 40)
Pacf(ts_table_10.1[,i], lag.max = 40)
plot(table_10.1$date, table_10.1$name[i+1], type = "l", col= "blue")
}
name[2]
name[3]
#Load/install required package here
library(xlsx)
#Load/install required package here
library(readxl)
library(ggplot2)
library(forecast)
library(tseries)
library(Kendall)
#Importing data set - using xlsx package
table_10.1<- read_xls("../Data/Table_10.1_Renewable_Energy_Production_and_Consumption_by_Source.xlsx")
#Importing data set - using xlsx package
table_10.1<- read_xls(file="../Data/Table_10.1_Renewable_Energy_Production_and_Consumption_by_Source.xlsx")
#Importing data set - using xlsx package
table_10.1<- read_xls(file="./Data/Table_10.1_Renewable_Energy_Production_and_Consumption_by_Source.xlsx")
#Importing data set - using xlsx package
table_10.1<- read_xls("./Data/Table_10.1_Renewable_Energy_Production_and_Consumption_by_Source.xlsx")
#Importing data set - using xlsx package
table_10.1<- read_xls("../Data/Table_10.1_Renewable_Energy_Production_and_Consumption_by_Source.xlsx")
#Importing data set - using xlsx package
table_10.1<- read_xlsx("../Data/Table_10.1_Renewable_Energy_Production_and_Consumption_by_Source.xlsx")
?read_xlsx
#Importing data set - using xlsx package
table_10.1<- read_xlsx("./Data/Table_10.1_Renewable_Energy_Production_and_Consumption_by_Source.xlsx")
View(table_10.1)
#Importing data set - using xlsx package
table_10.1<- read_xlsx("./Data/Table_10.1_Renewable_Energy_Production_and_Consumption_by_Source.xlsx", col_names = TRUE)
#Importing data set - using xlsx package
table_10.1<- read_xlsx("./Data/Table_10.1_Renewable_Energy_Production_and_Consumption_by_Source.xlsx", skip = 11)
#Importing data set - using xlsx package
table_10.1<- read_xlsx("./Data/Table_10.1_Renewable_Energy_Production_and_Consumption_by_Source.xlsx", skip = 12)
#Importing data set - using xlsx package
table_10.1<- read_xlsx("./Data/Table_10.1_Renewable_Energy_Production_and_Consumption_by_Source.xlsx", skip = 10)
table_10.1[-1,]
View(table_10.1)
table_10.1[2:598,]
View(table_10.1)
table_10.1[-c(1),]
View(table_10.1)
table_10.1[-c(2),]
table_10.1[-(2),]
table_10.1<- read.table(file= "./Data/Table_10.1_Renewable_Energy_Production_and_Consumption_by_Source-Edit.csv",
header=TRUE,dec = ".",sep=",",stringsAsFactors = TRUE)
View(table_10.1)
#Importing data set - using xlsx package
table_10.1<- read_xlsx("./Data/Table_10.1_Renewable_Energy_Production_and_Consumption_by_Source.xlsx", skip = 11)
View(table_10.1)
table_10.1<- table_10.1[, c("Month", "Total.Biomass.Energy.Production",
"Total.Renewable.Energy.Production",
"Hydroelectric.Power.Consumption")]
able_10.1<- read.table(file= "./Data/Table_10.1_Renewable_Energy_Production_and_Consumption_by_Source-Edit.csv",
header=TRUE,dec = ".",sep=",",stringsAsFactors = TRUE)
table_10.1<- read.table(file= "./Data/Table_10.1_Renewable_Energy_Production_and_Consumption_by_Source-Edit.csv",
header=TRUE,dec = ".",sep=",",stringsAsFactors = TRUE)
View(table_10.1)
Tot_renewable_energy<- table_10.1[,4]
knitr::opts_chunk$set(echo = TRUE,tidy.opts=list(width.cutoff=80), tidy=FALSE)
library(lubridate)
library(ggplot2)
library(forecast)
library(Kendall)
library(tseries)
#New packages for M4
#install.packages("outliers")
library(outliers)
#install.packages("tidyverse")
library(tidyverse)
#Importing time series data from text file#
wind_data <- read.csv(file="./Data/Wind_Speed_PortArthurTX_Processed.csv",header=TRUE,stringsAsFactors = TRUE)
#Importing time series data from text file#
wind_data <- read.csv(file="./Data/Wind_Speed_PortArthurTX_Processed.csv",header=TRUE,stringsAsFactors = TRUE)
#Importing time series data from text file#
wind_data <- read.csv(file="../Data/Wind_Speed_PortArthurTX_Processed.csv",header=TRUE,stringsAsFactors = TRUE)
#creating data object
wind_data$DATE <- ym(wind_data$DATE)
getwd()
View(wind_data)
ts_wind_data <- ts(wind_data$AWND.1,frequency=12)
#using package ggplot2 to make histograms
ggplot(wind_data, aes(x = DATE, y = AWND.1)) +
geom_line() +
ylab("Average Wind Speed")
clean_wind_data <- tsclean(ts_wind_data)  #object should be a time series
full_wind_data <- data_frame(Date=wind_data$DATE, Wind = wind_data$AWND.1, Wind_Clean = as.numeric(clean_wind_data))
ggplot(full_wind_data) +
geom_line(aes(x = Date, y = Wind_Clean), color = "red") +
geom_line(aes(x = Date, y = Wind), color = "black") +
ylab("Average Wind Speed")
View(full_wind_data)
View(wind_data)
#Ex1: Using R decompose function decompose the wind data in seasonal, trend and random
decompose_wind_data<- decompose(clean_wind_data)
plot(decompose_wind_data)
#Ex2: Store the three component in separate vector
wind_trend<- decompose_wind_data$trend
wind_seasonal<- decompose_wind_data$seasonal
wind_random<- decompose_wind_data$random
#Ex3: Create one data frame with all three vector and the Date columns from wind_data
df_wind_data<- data_frame("Date"=wind_data$DATE,wind_trend,wind_seasonal,wind_random)
#Ex4: Inspect the data frame using head() and tail()
head(df_wind_data,15)
tail(df_wind_data,15)
plot(decompose_wind_data)
