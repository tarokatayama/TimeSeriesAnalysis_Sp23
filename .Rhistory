#If you want specific columns just trim the table
raw_inflow_data <- raw_inflow_data[,1:5] #the space before the comma means you want all rows
View(raw_inflow_data)
View(raw_inflow_data)
#check which folder is your current directory using function getwd()
getwd()
raw_inflow_data <- read.table(file="./Data/inflowtimeseries.txt",header=FALSE,skip=0)
#If you want specific columns just trim the table
raw_inflow_data <- raw_inflow_data[,1:5] #the space before the comma means you want all rows
#and 1:5 means all columns from 1 to 5
nhydro <- ncol(raw_inflow_data)-2
View(raw_inflow_data)
nobs <- nrow(raw_inflow_data)
#If your file does not have header like this one you can add column names after creating the data frame
colnames(raw_inflow_data)=c("Month","Year", "HP1", "HP2","HP3")
#Checking data
head(raw_inflow_data)
str(raw_inflow_data)
#using package lubridate
my_date <- paste(raw_inflow_data[,1],raw_inflow_data[,2],sep="-")
my_date <- my(my_date)  #function my from package lubridate
head(my_date)
#add that to inflow_data
inflow_data <- cbind(my_date,raw_inflow_data[,3:5])
View(inflow_data)
head(inflow_data)
format(my_date[1],format="%y-%m")
format(my_date[1],format="%Y-%m")
format(my_date[1],format="%Y-%b")
format(my_date[1],format="%Y-%m")
format(my_date[1],format="%Y-%b")
format(my_date[1],format="%y-%m")
format(my_date[1],format="%Y-%m")
format(my_date[1],format="%Y-%b")
#Graph 1: Plot the series for HP1
plot(inflow_data[,"HP1"]) # note that this do not generate a nice plot
plot(inflow_data[,"HP1"],type="l") #The type "l" tells you want a line plot check help(plot)
plot(inflow_data[,"HP1"],type="l",col="blue") #Change the color of the series
plot(inflow_data[,"HP1"],type="l",col="blue",ylab="Inflow [m3/s]")
plot(inflow_data[,"HP1"],type="l",col="blue",ylab="Inflow [m3/s]",main="Historical Inflow Data for HP1")
#Additional - Suppose you want to add a line with the mean
abline(h=mean(inflow_data[,"HP1"]),col="red")
plot(inflow_data[,"HP1"],type="l",col="blue",ylab="Inflow [m3/s]")
lines(inflow_data[,"HP2"],col="red") #Note if you use plot you generate a new graph
#no need to specify type in lines() function
title(main="Infow Series for HP1 and HP2")
#If you want to add legend
legend("topright",legend=c("HP1","HP2"), lty=c("solid","solid"),col=c("blue","red"))
plot(inflow_data[,"HP1"],type="l",col="blue",ylab="Inflow [m3/s]",main="Historical Inflow Data for HP1")
#Additional - Suppose you want to add a line with the mean
abline(h=mean(inflow_data[,"HP1"]),col="red")
#using package ggplot2
ggplot(inflow_data, aes(x=my_date, y=HP1)) +
geom_line(color="blue")
#adding two time series to the same plot
ggplot(inflow_data, aes(x=my_date, y=Inflow)) +
geom_line(aes(y=HP1,col="HP1")) +
geom_line(aes(y=HP2,col="HP2")) +
xlab("Time") +
labs(color="Reservoir")
#using package ggplot2
ggplot(inflow_data, aes(x=my_date, y=HP1)) +
geom_line(color="blue")
#adding two time series to the same plot
ggplot(inflow_data, aes(x=my_date, y=Inflow)) +
geom_line(aes(y=HP1,col="HP1")) +
geom_line(aes(y=HP2,col="HP2")) +
xlab("Time") +
labs(color="Reservoir")
#Graph 3: Simple Histogram
hist(inflow_data[,"HP1"])
hist(inflow_data[,"HP1"],breaks=30,col="gray")  #increase number of bars with breaks input
#Graph 4: Scatter Plot of HP1 and HP2
plot(inflow_data[,"HP1"],inflow_data[,"HP2"])
#using package ggplot2
ggplot(inflow_data, aes(x=my_date, y=HP1)) +
geom_line(color="blue")
#adding two time series to the same plot
ggplot(inflow_data, aes(x=my_date, y=Inflow)) +
geom_line(aes(y=HP1,col="HP1")) +
geom_line(aes(y=HP2,col="HP2")) +
xlab("Time") +
labs(color="Reservoir")
ts_inflow_data <- ts(inflow_data[,2:(2+nhydro-1)]) #note that we are only transforming columns with inflow data, not the date columns
ts_inflow_data
acf(ts_inflow_data[,1])
acf(ts_inflow_data[,1])
View(ts_inflow_data)
acf(ts_inflow_data[,1],lag.max = 50)
pacf(ts_inflow_data[,1],lag.max = 50)
library(forecast)
Acf(ts_inflow_data[,1],lag.max = 50)
Pacf(ts_inflow_data[,1],lag.max = 50)
Acf(ts_inflow_data[,1],lag.max = 50)
Pacf(ts_inflow_data[,1],lag.max = 50)
#Load/install required package here
library(forecast)
#Load/install required package here
library(forecast)
install.packages("tseries")
install.packages("tseries")
library(dplyr)
install.packages("dplyr")
library(dplyr)
library(tseries)
#Importing data set
table_10.1<- read.table("../Data/Table_10.1_Renewable_Energy_Production_and_Consumption_by_Source-Edit.csv")
#Importing data set
table_10.1<- read.table("./Data/Table_10.1_Renewable_Energy_Production_and_Consumption_by_Source-Edit.csv")
#Importing data set
table_10.1<- read.table(file= "../Data/Table_10.1_Renewable_Energy_Production_and_Consumption_by_Source-Edit.csv")
#Importing data set
table_10.1<- read.table(file= "./Data/Table_10.1_Renewable_Energy_Production_and_Consumption_by_Source-Edit.csv")
#Importing data set
table_10.1<- read.table(file= "./Data/Table_10.1_Renewable_Energy_Production_and_Consumption_by_Source-Edit.csv",
header=TRUE,dec = ".",sep=",",stringsAsFactors = TRUE)
View(table_10.1)
table_10.1<- table_10.1[,4:6]
View(table_10.1)
head(table_10.1)
#Importing data set
table_10.1<- read.table(file= "./Data/Table_10.1_Renewable_Energy_Production_and_Consumption_by_Source-Edit.csv",
header=TRUE,dec = ".",sep=",",stringsAsFactors = TRUE)
table_10.1<- table_10.1[,1,4:6]
#Importing data set
table_10.1<- read.table(file= "./Data/Table_10.1_Renewable_Energy_Production_and_Consumption_by_Source-Edit.csv",
header=TRUE,dec = ".",sep=",",stringsAsFactors = TRUE)
View(ts_inflow_data)
View(table_10.1)
table_10.1<- table_10.1[,c("Month")]
table_10.1<- table_10.1[,c("Month")]
#Importing data set
table_10.1<- read.table(file= "./Data/Table_10.1_Renewable_Energy_Production_and_Consumption_by_Source-Edit.csv",
header=TRUE,dec = ".",sep=",",stringsAsFactors = TRUE)
View(table_10.1)
View(table_10.1)
table_10.1<- table_10.1[, 1]
#Importing data set
table_10.1<- read.table(file= "./Data/Table_10.1_Renewable_Energy_Production_and_Consumption_by_Source-Edit.csv",
header=TRUE,dec = ".",sep=",",stringsAsFactors = TRUE)
View(table_10.1)
View(table_10.1)
table_10.1<- table_10.1[, c("Month", "Total.Biomass.Energy.Production", "Total.Renewable.Energy.Production", "Hydroelectric.Power.Consumption")]
View(table_10.1)
head(table_10.1)
str(table_10.1)
View(table_10.1)
View(table_10.1)
ts()?
ts_table_10.1<- ts(table_10.1[,2:4])
?ts()
View(table_10.1)
View(table_10.1)
ts_table_10.1<- ts(table_10.1[,2:4], start = 1, end = 597, frequency = 12)
View(ts_table_10.1)
library(lubridate)
date<- ym(table_10.1$Month)
format(date[1],format="%Y-%m")
format(date,format="%Y-%m")
table_10.1<-cbind(date, table_10.1[,2:4])
View(table_10.1)
format(table_10.1$date,format="%Y-%m")
View(table_10.1)
View(ts_table_10.1)
View(ts_inflow_data)
View(table_10.1)
mean(ts_table_10.1)
mean(ts_table_10.1[1])
mean(ts_table_10.1[1,2,3])
mean(ts_table_10.1[2])
mean(ts_table_10.1[3])
mean(ts_table_10.1[1])
mean(ts_table_10.1[2])
mean(ts_table_10.1[3])
?sd
sd(ts_table_10.1[1])
mean(ts_table_10.1[,1])
mean(ts_table_10.1[,2])
mean(ts_table_10.1[,3])
sd(ts_table_10.1[,1])
sd(ts_table_10.1[,2])
sd(ts_table_10.1[,3])
View(table_10.1)
ggplot(table_10.1, aes(x=date, y=Total.Biomass.Energy.Production)) +
geom_line(color="blue")
library(ggplot2)
ggplot(table_10.1, aes(x=date, y=Total.Biomass.Energy.Production)) +
geom_line(color="blue")
ggplot(table_10.1, aes(x=date, y=Total.Biomass.Energy.Production)) +
geom_line(color="blue")+ geom_abline()
ggplot(table_10.1, aes(x=date, y=Total.Biomass.Energy.Production)) +
geom_line(color="blue")+ geom_abline(y=277.0216)
ggplot(table_10.1, aes(x=date, y=Total.Biomass.Energy.Production)) +
geom_line(color="blue")+ geom_line(x=277.0216)
ggplot(table_10.1, aes(x=date, y=Total.Biomass.Energy.Production)) +
geom_line(color="blue")+ geom_abline(x=277.0216)
ggplot(table_10.1, aes(x=date, y=Total.Biomass.Energy.Production)) +
geom_line(color="blue")+ geom_line(aes(y= mean(Total.Biomass.Energy.Production)), color = "red")
ggplot(table_10.1, aes(x=date, y=Total.Biomass.Energy.Production)) +
geom_line(color="blue")+ geom_line(aes(y= mean(Total.Biomass.Energy.Production)), color = "red")+
theme_bw()
ggplot(table_10.1, aes(x=date, y=Total.Biomass.Energy.Production)) +
geom_line(color="blue")+ geom_line(aes(y= mean(Total.Biomass.Energy.Production)), color = "red")+
xlab("Date")+ ylab("Total Biomass Energy Production")+
theme_bw()
ggplot(table_10.1, aes(x=date, y=Total.Renewable.Energy.Production)) +
geom_line(color="blue")+ geom_line(aes(y= mean(Total.Renewable.Energy.Production)), color = "red")+
xlab("Date")+ ylab("Total Renewable Energy Production")+
theme_bw()
ggplot(table_10.1, aes(x=date, y=Hydroelectric.Power.Consumption)) +
geom_line(color="blue")+ geom_line(aes(y= mean(Hydroelectric.Power.Consumption)), color = "red")+
xlab("Date")+ ylab("Hydroelectric Power Consumption")+
theme_bw()
ggplot(table_10.1, aes(x=date, y=Total.Renewable.Energy.Production)) +
geom_line(color="blue")+ geom_line(aes(y= mean(Total.Renewable.Energy.Production)), color = "purple")+
xlab("Date")+ ylab("Total Renewable Energy Production")+
theme_bw()
ggplot(table_10.1, aes(x=date, y=Hydroelectric.Power.Consumption)) +
geom_line(color="blue")+ geom_line(aes(y= mean(Hydroelectric.Power.Consumption)), color = "green")+
xlab("Date")+ ylab("Hydroelectric Power Consumption")+
theme_bw()
?corr
?corr()
?cor()
cor(table_10.1[,1],table_10.1[,2])
View(ts_table_10.1)
cor(ts_table_10.1[,1], ts_table_10.1[,2])
cor.test(ts_table_10.1[,1], ts_table_10.1[,2])
View(table_10.1)
View(ts_table_10.1)
cor.test(ts_table_10.1[,2], ts_table_10.1[,3])
cor.test(ts_table_10.1[,1], ts_table_10.1[,3])
?cor.test
acf(ts_table_10.1[,1], lag.max = 40)
acf(ts_inflow_data[,1],lag.max = 50)
acf(ts_table_10.1[,1],lag.max = 40)
acf(ts_table_10.1[,2],lag.max = 40)
acf(ts_table_10.1[,3], lag.max = 40)
ts_table_10.1<- ts(table_10.1[,2:4], start = 1, end = 597, frequency = 1)
cor.test(ts_table_10.1[,1], ts_table_10.1[,2])
cor.test(ts_table_10.1[,2], ts_table_10.1[,3])
#there is a slight negative correlation between total renewable energy production and hydroelectric power consumption of -0.0972. This correlation is significant with a p value of <0.05.
cor.test(ts_table_10.1[,1], ts_table_10.1[,3])
acf(ts_table_10.1[,1],lag.max = 40)
acf(ts_table_10.1[,2],lag.max = 40)
acf(ts_table_10.1[,3], lag.max = 40)
ggplot(table_10.1, aes(x=date, y=Hydroelectric.Power.Consumption)) +
geom_line(color="blue")+ geom_line(aes(y= mean(Hydroelectric.Power.Consumption)), color = "green")+
xlab("Date")+ ylab("Hydroelectric Power Consumption")+
theme_bw()
acf(ts_table_10.1[,3], lag.max = 40)
pacf(ts_table_10.1[,1],lag.max = 40)
pacf(ts_table_10.1[,2],lag.max = 40)
pacf(ts_table_10.1[,3], lag.max = 40)
pacf(ts_table_10.1[,2],lag.max = 40)
pacf(ts_table_10.1[,1],lag.max = 40)
?cor.test
cor.test(ts_table_10.1[,1], ts_table_10.1[,2])
cor.test(ts_table_10.1[,1], ts_table_10.1[,2], method = "kendall")
View(inflow_data)
inflow_data<- inflow_data[1:(nobs-12),]
View(ts_table_10.1)
View(table_10.1)
ggplot(table_10.1, aes(x=date, y=Total.Biomass.Energy.Production)) +
geom_line(color="blue")+ geom_line(aes(y= mean(Total.Biomass.Energy.Production)), color = "red")+
xlab("Date")+ ylab("Total Biomass Energy Production")+
theme_bw()
library(forecast)
#install.packages("tseries")
#install.packages("dplyr")
library(dplyr)
library(tseries)
library(lubridate)
library(ggplot2)
ggplot(table_10.1, aes(x=date, y=Total.Biomass.Energy.Production)) +
geom_line(color="blue")+ geom_line(aes(y= mean(Total.Biomass.Energy.Production)), color = "red")+
xlab("Date")+ ylab("Total Biomass Energy Production")+
theme_bw()
View(table_10.1)
ggplot(table_10.1, aes(x=date, y=Total.Biomass.Energy.Production)) +
geom_line(color="blue")+ geom_line(aes(y= mean(Total.Biomass.Energy.Production)), color = "red")+
xlab("Date")+ ylab("Total Biomass Energy Production")+ title("Total Biomass Energy Production (1973-2022)")+
theme_bw()
?ggplot
ggplot(table_10.1, aes(x=date, y=Total.Biomass.Energy.Production)) +
geom_line(color="blue")+ geom_line(aes(y= mean(Total.Biomass.Energy.Production)), color = "red")+
xlab("Date")+ ylab("Total Biomass Energy Production")+ ggtitle("Total Biomass Energy Production (1973-2022)")+
theme_bw()
ggplot(table_10.1, aes(x=date, y=Total.Biomass.Energy.Production)) +
geom_line(color="blue")+ geom_line(aes(y= mean(Total.Biomass.Energy.Production)), color = "red")+
xlab("Date")+ ylab("Total Biomass Energy Production")+ ggtitle("Total Biomass Energy Production (Jan 1973- Sep 2022)")+
theme_bw()
ggplot(table_10.1, aes(x=date, y=Total.Renewable.Energy.Production)) +
geom_line(color="blue")+ geom_line(aes(y= mean(Total.Renewable.Energy.Production)), color = "purple")+
xlab("Date")+ ylab("Total Renewable Energy Production")++ ggtitle("Total Renewable Energy Production (Jan 1973- Sep 2022)")+
theme_bw()
ggplot(table_10.1, aes(x=date, y=Total.Renewable.Energy.Production)) +
geom_line(color="blue")+ geom_line(aes(y= mean(Total.Renewable.Energy.Production)), color = "purple")+
xlab("Date")+ ylab("Total Renewable Energy Production")++ ggtitle("Total Renewable Energy Production (Jan 1973- Sep 2022)")+
theme_bw()
ggplot(table_10.1, aes(x=date, y=Total.Renewable.Energy.Production)) +
geom_line(color="blue")+ geom_line(aes(y= mean(Total.Renewable.Energy.Production)), color = "purple")+
xlab("Date")+ ylab("Total Renewable Energy Production")+ ggtitle("Total Renewable Energy Production (Jan 1973- Sep 2022)")+
theme_bw()
ggplot(table_10.1, aes(x=date, y=Hydroelectric.Power.Consumption)) +
geom_line(color="blue")+ geom_line(aes(y= mean(Hydroelectric.Power.Consumption)), color = "green")+
xlab("Date")+ ylab("Hydroelectric Power Consumption")+ ggtitle("Hydroelectric Power Consumption (Jan 1973- Sep 2022)")+
theme_bw()
ggplot(table_10.1, aes(x=date, y=Total.Biomass.Energy.Production)) +
geom_line(color="blue")+ geom_line(aes(y= mean(Total.Biomass.Energy.Production)), color = "red")+
xlab("Date")+ ylab("Total Biomass Energy Production")+ ggtitle("Total Biomass Energy Production (Jan 1973- Sep 2022)")+
theme_bw()
mean(ts_table_10.1[,1])
ggplot(table_10.1, aes(x=date, y=Total.Renewable.Energy.Production)) +
geom_line(color="blue")+ geom_line(aes(y= mean(Total.Renewable.Energy.Production)), color = "purple")+
xlab("Date")+ ylab("Total Renewable Energy Production")+ ggtitle("Total Renewable Energy Production (Jan 1973- Sep 2022)")+
theme_bw()
mean(ts_table_10.1[,2])
ggplot(table_10.1, aes(x=date, y=Total.Biomass.Energy.Production)) +
geom_line(color="blue")+ geom_line(aes(y= mean(Total.Biomass.Energy.Production)), color = "red")+
xlab("Date")+ ylab("Total Biomass Energy Production")+ ggtitle("Total Biomass Energy Production (Jan 1973- Sep 2022)")+
theme_bw()
ggplot(table_10.1, aes(x=date, y=Hydroelectric.Power.Consumption)) +
geom_line(color="blue")+ geom_line(aes(y= mean(Hydroelectric.Power.Consumption)), color = "green")+
xlab("Date")+ ylab("Hydroelectric Power Consumption")+ ggtitle("Hydroelectric Power Consumption (Jan 1973- Sep 2022)")+
theme_bw()
mean(ts_table_10.1[,3])
cor.test(ts_table_10.1[,1], ts_table_10.1[,2])
cor.test(ts_table_10.1[,2], ts_table_10.1[,3])
acf(ts_table_10.1[,3], lag.max = 40)
acf(ts_table_10.1[,1],lag.max = 40)
ts_table_10.1<- ts(table_10.1[,2:4], start = 1, end = 597, frequency = 12)
mean(ts_table_10.1[,1])
sd(ts_table_10.1[,1])
mean(ts_table_10.1[,2])
sd(ts_table_10.1[,2])
mean(ts_table_10.1[,3])
sd(ts_table_10.1[,3])
```
ggplot(table_10.1, aes(x=date, y=Total.Biomass.Energy.Production)) +
geom_line(color="blue")+ geom_line(aes(y= mean(Total.Biomass.Energy.Production)), color = "red")+
xlab("Date")+ ylab("Total Biomass Energy Production")+ ggtitle("Total Biomass Energy Production (Jan 1973- Sep 2022)")+
theme_bw()
ggplot(table_10.1, aes(x=date, y=Total.Renewable.Energy.Production)) +
geom_line(color="blue")+ geom_line(aes(y= mean(Total.Renewable.Energy.Production)), color = "purple")+
xlab("Date")+ ylab("Total Renewable Energy Production")+ ggtitle("Total Renewable Energy Production (Jan 1973- Sep 2022)")+
theme_bw()
ggplot(table_10.1, aes(x=date, y=Hydroelectric.Power.Consumption)) +
geom_line(color="blue")+ geom_line(aes(y= mean(Hydroelectric.Power.Consumption)), color = "green")+
xlab("Date")+ ylab("Hydroelectric Power Consumption")+ ggtitle("Hydroelectric Power Consumption (Jan 1973- Sep 2022)")+
theme_bw()
cor.test(ts_table_10.1[,1], ts_table_10.1[,2])
cor(ts_table_10.1[, c(1,2,3)])
cor.test(ts_table_10.1[,1], ts_table_10.1[,2])
acf(ts_table_10.1[,1],lag.max = 40)
acf(ts_table_10.1[,2],lag.max = 40)
acf(ts_table_10.1[,3], lag.max = 40)
#total biomass production and total renewable energy production are significantly correlated,
#with cor=0.919, and p value of < 0.05. Since biomass is a renewable energy source, the rise in biomass production also relates to total renewable energy production. However, just because these two variables are correlated, it does not mean that the rise in total renewable energy is caused by a rise in biomass production.
cor.test(ts_table_10.1[,2], ts_table_10.1[,3])
#there is a slight negative correlation between total renewable energy production and
#hydroelectric power consumption of -0.097. This correlation is
#significant with a p value of <0.05.
cor.test(ts_table_10.1[,1], ts_table_10.1[,3])
knitr::opts_chunk$set(echo = TRUE,tidy.opts=list(width.cutoff=80), tidy=FALSE)
library(lubridate)
library(ggplot2)
library(forecast)
library(Kendall)
library(tseries)
#Importing time series data from text file#
raw_inflow_data <- read.table(file="../Data/inflowtimeseries.txt",header=FALSE,skip=0)
#Trim the table to include only columns you need
nhydro <- ncol(raw_inflow_data)-2
nobs <- nrow(raw_inflow_data)
#If your file does not have header like this one you can add column names after
#creating the data frame
colnames(raw_inflow_data)=c("Month","Year", "HP1", "HP2","HP3","HP4", "HP5",
"HP6","HP7", "HP8","HP9","HP10", "HP11","HP12",
"HP13", "HP14","HP15")
#Checking data
head(raw_inflow_data)
str(raw_inflow_data)
#using package lubridate
my_date <- paste(raw_inflow_data[,1],raw_inflow_data[,2],sep="-")
my_date <- my(my_date)  #function my from package lubridate
head(my_date)
#add that to inflow_data and store in a new data frame
inflow_data <- cbind(my_date,raw_inflow_data[,3:(3+nhydro-1)])
head(inflow_data)
#using package ggplot2
for(i in 1:nhydro){
print(ggplot(inflow_data, aes(x=my_date, y=inflow_data[,(1+i)])) +
geom_line(color="blue") +
ylab(paste0("Inflow ",colnames(inflow_data)[(1+i)],sep=""))
)
}
#check the final obs on data
tail(inflow_data)
#Remove last year by replacing current data frame
inflow_data <- inflow_data[1:(nobs-412),]
#update object with number of observations
nobs <- nobs-12
#Tail again to check if the rows were correctly removed
tail(inflow_data)
View(inflow_data)
inflow_data_ts<- ts(inflow_data[2:nhydro],)
View(inflow_data_ts)
inflow_data_ts<- ts(inflow_data[2:nhydro+1],)
Acf(inflow_data_ts)
## Plotting ACF and PACF
inflow_data_ts<- ts(inflow_data[,2:nhydro+1])
inflow_data_ts<- ts(inflow_data[,2:nhydro+1])
inflow_data_ts<- ts(inflow_data[,2:nhydro+1], frequency = 12)
head(inflow_data_ts)
inflow_data_ts<- ts(inflow_data[,2:nhydro+1], frequency = 12, start=c(1931,1,1))
head(inflow_data_ts)
inflow_data_ts<- ts(inflow_data[,2:nhydro+1], frequency = 12, start=c(1931,1,1))
head(inflow_data_ts)
inflow_data_ts<- ts(inflow_data[,2:nhydro+1], frequency = 12, start=c(1931,1))
for(i in 1:hydro){
Acf(inflow_data_ts[,i],lag.max = 40)
Pacf(inflow_data_ts[,i],lag.max = 40)
}
for(i in 1:nhydro){
Acf(inflow_data_ts[,i],lag.max = 40)
Pacf(inflow_data_ts[,i],lag.max = 40)
}
for(i in 1:nhydro){
par(mfrow=c(1,2))
Acf(inflow_data_ts[,i],lag.max = 40, main=paste0("HP",i))
Pacf(inflow_data_ts[,i],lag.max = 40, main=paste0("HP",i))
}
for(i in 1:nhydro){
par(mfrow=c(1,2))
Acf(inflow_data_ts[,i],lag.max = 40, main=paste0("HP",i+1))
Pacf(inflow_data_ts[,i],lag.max = 40, main=paste0("HP",i+1))
}
for(i in 1:nhydro){
par(mfrow=c(1,2))
Acf(inflow_data_ts[,i],lag.max = 40, main=paste0("HP",i))
Pacf(inflow_data_ts[,i],lag.max = 40, main=paste0("HP",i))
}
#inflow_data_ts<- ts(inflow_data[,2:nhydro+1], frequency = 12, start=c(1931,1))
inflow_data_ts<- ts(inflow_data[,2:16], frequency = 12, start=c(1931,1))
for(i in 1:nhydro){
par(mfrow=c(1,2))
Acf(inflow_data_ts[,i],lag.max = 40, main=paste0("HP",i))
Pacf(inflow_data_ts[,i],lag.max = 40, main=paste0("HP",i))
}
acf(ts_table_10.1[,1],lag.max = 40)
acf(ts_table_10.1[,2],lag.max = 40)
acf(ts_table_10.1[,3], lag.max = 40)
acf(ts_table_10.1[,3], lag.max = 40)
for(i in 1:nhydro){
par(mfrow=c(1,2))
Acf(inflow_data_ts[,i],lag.max = 40, main=paste0("HP",i))
Pacf(inflow_data_ts[,i],lag.max = 40, main=paste0("HP",i))
}
#Create vector t
t <- 1:nobs
#Fit a linear trend to TS of iHP
?lm
iHP=4
#Fit a linear trend to TS of iHP
linear_trend <- lm(inflow_data[iHP+1] ~ t)
#Fit a linear trend to TS of iHP
linear_trend <- lm(inflow_data[,iHP+1] ~ t)
summary(linear_trend)
#Fit a linear trend to TS of iHP
linear_trend <- lm(inflow_data[,iHP+1] ~ t)
#Create vector t
t <- 1:nobs
iHP=4
#Fit a linear trend to TS of iHP
linear_trend <- lm(inflow_data[,iHP+1] ~ t)
#Fit a linear trend to TS of iHP
linear_trend <- lm(inflow_data[,5] ~ t)
#Fit a linear trend to TS of iHP
linear_trend <- lm(inflow_data[,iHP+1]~ t)
#Create vector t
t <- 1:nobs
#Fit a linear trend to TS of iHP
linear_trend <- lm(inflow_data[,iHP+1]~ t)
#Create vector t
t <- 1:956
#Fit a linear trend to TS of iHP
linear_trend <- lm(inflow_data[,iHP+1]~ t)
#Create vector t
t <- 1:960
#Create vector t
t <- 1:560
#Fit a linear trend to TS of iHP
linear_trend <- lm(inflow_data[,iHP+1]~ t)
summary(linear_trend)
#Remove last year by replacing current data frame
inflow_data <- inflow_data[1:(nobs-12),]
#Create vector t
t <- 1:nobs
#Fit a linear trend to TS of iHP
linear_trend <- lm(inflow_data[,iHP+1]~ t)
#update object with number of observations
nobs <- nobs-12
#Tail again to check if the rows were correctly removed
tail(inflow_data)
#Create vector t
t <- 1:nobs
#Fit a linear trend to TS of iHP
linear_trend <- lm(inflow_data[,iHP+1]~ t)
summary(linear_trend)
ggplot(inflow_data,aes(x=my_date,y=inflow_data[,ihp+1]))+
geom_smooth(method= "lm", color = "red")
