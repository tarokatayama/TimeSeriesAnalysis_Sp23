ggplot(full_wind_data) +
geom_line(aes(x = Date, y = Wind_Clean), color = "red") +
geom_line(aes(x = Date, y = Wind), color = "black") +
ylab("Average Wind Speed")
View(full_wind_data)
View(wind_data)
#Ex1: Using R decompose function decompose the wind data in seasonal, trend and random
decompose_wind_data<- decompose(clean_wind_data)
plot(decompose_wind_data)
#Ex2: Store the three component in separate vector
wind_trend<- decompose_wind_data$trend
wind_seasonal<- decompose_wind_data$seasonal
wind_random<- decompose_wind_data$random
#Ex3: Create one data frame with all three vector and the Date columns from wind_data
df_wind_data<- data_frame("Date"=wind_data$DATE,wind_trend,wind_seasonal,wind_random)
#Ex4: Inspect the data frame using head() and tail()
head(df_wind_data,15)
tail(df_wind_data,15)
plot(decompose_wind_data)
#Importing data set - using xlsx package
table_10.1<- read_xlsx("./Data/Table_10.1_Renewable_Energy_Production_and_Consumption_by_Source.xlsx", header=TRUE)
#Load/install required package here
library(readxl)
library(ggplot2)
library(forecast)
library(tseries)
library(Kendall)
#Importing data set - using xlsx package
table_10.1<- read_xlsx("./Data/Table_10.1_Renewable_Energy_Production_and_Consumption_by_Source.xlsx", header=TRUE)
#Load/install required package here
library(readxl)
library(ggplot2)
library(forecast)
library(tseries)
library(Kendall)
table_10.1<- read.table(file= "./Data/Table_10.1_Renewable_Energy_Production_and_Consumption_by_Source-Edit.csv",
header=TRUE,dec = ".",sep=",",stringsAsFactors = TRUE)
View(table_10.1)
Tot_renewable_energy<- table_10.1[,"Month","Total.Renewable.Energy.Production"]
library(xlsx)
colnames(table_10.1)
Tot_renewable_energy<- table_10.1[,c("Month","Total.Renewable.Energy.Production")]
View(Tot_renewable_energy)
View(Tot_renewable_energy)
Tot_renewable_energy$Month<- ym(Tot_renewable_energy$Month)
library(lubridate)
Tot_renewable_energy$Month<- ym(Tot_renewable_energy$Month)
diffy_tot_renewable_energy<- diff(Tot_renewable_energy$Total.Renewable.Energy.Production, lag = 1, differences = 1)
plot(diffy_tot_renewable_energy)
View(Tot_renewable_energy)
?diff
diffy_tot_renewable_energy<- diff(Tot_renewable_energy$Month, lag = 1, differences = 1)
diffy_tot_renewable_energy<- diff(Tot_renewable_energy$Total.Renewable.Energy.Production, lag = 1, differences = 1)
plot(diffy_tot_renewable_energy)
plot(diffy_tot_renewable_energy, type = "l")
TRE<- 3
linear_trend_TRE <- lm(table_10.1[,TRE] ~ t)
nobs<- nrow(table_10.1)
t<- 1:nobs
linear_trend_TRE <- lm(table_10.1[,TRE] ~ t)
TRE<- 3
linear_trend_TRE <- lm(table_10.1[,TRE] ~ t)
table_10.1$Month<- ym(table_10.1$Month)
linear_trend_TRE <- lm(table_10.1[,TRE] ~ t)
#remove the trend from series
beta0_TRE<- linear_trend_TRE$coefficients[1]
beta1_TRE<- linear_trend_TRE$coefficients[2]
detrend_TRE<- table_10.1[,TRE]-(beta0_TRE+beta1_TRE*t)
View(table_10.1)
linear_trend_TBE <- lm(table_10.1[,TBE] ~ t)
linear_trend_TRE <- lm(table_10.1[,TRE] ~ t)
#Load/install required package here
library(forecast)
library(tseries)
library(lubridate)
library(Kendall)
library(ggplot2)
#Importing data set
table_10.1<- read.table(file= "./Data/Table_10.1_Renewable_Energy_Production_and_Consumption_by_Source-Edit.csv",
header=TRUE,dec = ".",sep=",",stringsAsFactors = TRUE)
table_10.1<- table_10.1[, c("Month", "Total.Biomass.Energy.Production",
"Total.Renewable.Energy.Production",
"Hydroelectric.Power.Consumption")]
date<- ym(table_10.1$Month)
table_10.1<-cbind(date, table_10.1[,2:4])
ts_table_10.1 <- ts(table_10.1[,2:4], frequency = 12, start = c(1973,1))
name = colnames(table_10.1)
for (i in 1:3){
par(mfrow=c(1,3))
plot(ts_table_10.1[,i], type = "l", col= "blue", xlab = "date",
ylab = name[i+1], main = name[i+1])
Acf(ts_table_10.1[,i], lag.max = 40,
main = paste0(" ACF"))
Pacf(ts_table_10.1[,i], lag.max = 40,
main = paste0("PCF"))
}
#Fit a linear trend to TS of Total biomass energy production (TBE)
nobs<- nrow(table_10.1)
t<- 1:nobs
TBE<- 2
linear_trend_TBE <- lm(table_10.1[,TBE] ~ t)
summary(linear_trend_TBE)
#the slope is positive at 0.48, and the intercept is positive at 133.7
#Fit a linear trend to TS of Total renewable energy production (TRE)
TRE<- 3
linear_trend_TRE <- lm(table_10.1[,TRE] ~ t)
summary(linear_trend_TRE)
#the slope is positive at 0.94, and the intercept is positive at 312.24
#Fit a linear trend to TS of Hydroelectric power consumption (HPC)
HPC<- 4
linear_trend_HPC <- lm(table_10.1[,HPC] ~ t)
summary(linear_trend_HPC)
#the slope is slightly negative at -0.08, and the intercept is positive at 259.90
#remove the trend from series
beta0_TBE<- linear_trend_TBE$coefficients[1]
beta1_TBE<- linear_trend_TBE$coefficients[2]
detrend_TBE<- table_10.1[,TBE]-(beta0_TBE+beta1_TBE*t)
ggplot(table_10.1,aes(x=date,y=table_10.1[,TBE]))+
ylab("Energy Production")+
geom_line(color="blue")+
geom_line(aes(y=detrend_TBE),color="green")
#The detrended series centers around 0 and shows the residuals.
#The original plot shows both residuals and trend.
#remove the trend from series
beta0_TRE<- linear_trend_TRE$coefficients[1]
beta1_TRE<- linear_trend_TRE$coefficients[2]
detrend_TRE<- table_10.1[,TRE]-(beta0_TRE+beta1_TRE*t)
ggplot(table_10.1,aes(x=date,y=table_10.1[,TRE]))+
geom_line(color="blue")+
ylab("Energy Production")+
geom_line(aes(y=detrend_TRE),color="green")
#The detrended series centers around 0 and shows the residuals.
#The original plot shows both residuals and trend.
#remove the trend from series
beta0_HPC<- linear_trend_HPC$coefficients[1]
beta1_HPC<- linear_trend_HPC$coefficients[2]
detrend_HPC<- table_10.1[,HPC]-(beta0_HPC+beta1_HPC*t)
ggplot(table_10.1,aes(x=date,y=table_10.1[,HPC]))+
geom_line(color="blue")+
ylab("Energy Consumption")+
geom_line(aes(y=detrend_HPC),color="green")
#The detrended series centers around 0 and shows the residuals.
#The original plot shows both residuals and trend.
#The residuals are quite large here so something more might be going on (seasonality).
#Load/install required package here
library(readxl)
library(ggplot2)
library(forecast)
library(tseries)
library(Kendall)
library(lubridate)
#Importing data set - using xlsx package
table_10.1<- read_xls()
#Importing data set - using xlsx package
table_10.1<- read.table(file= "./Data/Table_10.1_Renewable_Energy_Production_and_Consumption_by_Source-Edit.csv",
header=TRUE,dec = ".",sep=",",stringsAsFactors = TRUE)
table_10.1$Month<- ym(table_10.1$Month)
colnames(table_10.1)
Tot_renewable_energy<- table_10.1[,c("Month","Total.Renewable.Energy.Production")]
Tot_renewable_energy$Month<- ym(Tot_renewable_energy$Month)
View(table_10.1)
?diff
diffy_tot_renewable_energy<- diff(Tot_renewable_energy$Total.Renewable.Energy.Production, lag = 1, differences = 1)
plot(diffy_tot_renewable_energy, type = "l")
diffy_tot_renewable_energy<- diff(Tot_renewable_energy$Total.Renewable.Energy.Production, lag = 1, differences = 1)
plot(diffy_tot_renewable_energy, type = "l")
nobs<- nrow(table_10.1)
t<- 1:nobs
TRE<- 3
linear_trend_TRE <- lm(table_10.1[,TRE] ~ t)
#remove the trend from series
beta0_TRE<- linear_trend_TRE$coefficients[1]
beta1_TRE<- linear_trend_TRE$coefficients[2]
detrend_TRE<- table_10.1[,TRE]-(beta0_TRE+beta1_TRE*t)
ggplot(table_10.1,aes(x=date,y=table_10.1[,TRE]))+
geom_line(color="blue")+
ylab("Energy Production")+
geom_line(aes(y=detrend_TRE),color="green")
View(table_10.1)
TRE<- 5
linear_trend_TRE <- lm(table_10.1[,TRE] ~ t)
#remove the trend from series
beta0_TRE<- linear_trend_TRE$coefficients[1]
beta1_TRE<- linear_trend_TRE$coefficients[2]
detrend_TRE<- table_10.1[,TRE]-(beta0_TRE+beta1_TRE*t)
ggplot(table_10.1,aes(x=date,y=table_10.1[,TRE]))+
geom_line(color="blue")+
ylab("Energy Production")+
geom_line(aes(y=detrend_TRE),color="green")
ggplot(table_10.1,aes(x=Month,y=table_10.1[,TRE]))+
geom_line(color="blue")+
ylab("Energy Production")+
geom_line(aes(y=detrend_TRE),color="green")
ggplot(table_10.1,aes(x=Month,y=y=detrend_TRE))+
ggplot(table_10.1,aes(x=Month,y=detrend_TRE))+
geom_line(color="blue")+
ylab("Energy Production")
ggplot(table_10.1,aes(x=Month,y=detrend_TRE))+
geom_line(color="blue")+
ylab("Energy Production")+
geom_line(diffy_tot_renewable_energy)
ggplot(table_10.1,aes(x=Month,y=detrend_TRE))+
geom_line(color="blue")+
ylab("Energy Production")+
geom_line(aes(diffy_tot_renewable_energy))
ggplot(table_10.1,aes(x=Month,y=detrend_TRE))+
geom_line(color="blue")
par(mfrow(1,2))
par(mfrow=c(1,2))
ggplot(table_10.1,aes(x=Month,y=detrend_TRE))+
geom_line(color="blue")
nobs<- nrow(table_10.1)
t<- 1:nobs
TRE<- 5
linear_trend_TRE <- lm(table_10.1[,TRE] ~ t)
#remove the trend from series
beta0_TRE<- linear_trend_TRE$coefficients[1]
beta1_TRE<- linear_trend_TRE$coefficients[2]
detrend_TRE<- table_10.1[,TRE]-(beta0_TRE+beta1_TRE*t)
par(mfrow=c(1,2))
ggplot(table_10.1,aes(x=Month,y=detrend_TRE))+
geom_line(color="blue")
plot(detrend_TRE))
plot(detrend_TRE)
plot(detrend_TRE. type="l")
plot(detrend_TRE, type ="l")
par(mfrow=c(1,2))
plot(diffy_tot_renewable_energy, type = "l")
plot(detrend_TRE, type ="l")
#Data frame - remember to not include January 1973
detrend_TRE<- detrend_TRE[2:597]
Tot_renewable_energy<- Tot_renewable_energy[2:nobs,]
View(Tot_renewable_energy)
Tot_renewable_energy<- table_10.1[,c("Month","Total.Renewable.Energy.Production")]
Tot_renewable_energy$Month<- ym(Tot_renewable_energy$Month)
Tot_renewable_energy<- table_10.1[,c("Month","Total.Renewable.Energy.Production")]
Tot_renewable_energy<- Tot_renewable_energy[2:nobs,]
library(tidyverse)
df<- data_frame(Date=Tot_renewable_energy$Month, Total.Renewable.Energy=Tot_renewable_energy$Total.Renewable.Energy.Production,
Detrend=detrend_TRE, Diffy=diffy_tot_renewable_energy)
View(df)
View(df)
View(df)
#Use ggplot
ggplot(df, aes(x=Date, y= Total.Renewable.Energy))+
geom_line()
#Use ggplot
ggplot(df, aes(x=Date, y= Total.Renewable.Energy))+
geom_line()+
geom_line(aes(x=Date, y= Detrend))
#Use ggplot
ggplot(df, aes(x=Date, y= Total.Renewable.Energy, color = "blue"))+
geom_line()+
geom_line(aes(x=Date, y= Detrend, color = "green"))+
geom_line(aes(x=Date, y= Diffy, color= "red"))
#Use ggplot
ggplot(df, aes(x=Date, y= Total.Renewable.Energy, color = "blue"))+
geom_line()+
geom_line(aes(x=Date, y= Detrend, color = "green"))+
geom_line(aes(x=Date, y= Diffy))
#Use ggplot
ggplot(df, aes(x=Date, y= Total.Renewable.Energy, color = "blue"))
#Use ggplot
ggplot(df, aes(x=Date, y= Total.Renewable.Energy, color = "blue"))+
geom_line()
#Use ggplot
ggplot(df, aes(x=Date, y= Total.Renewable.Energy, color = "blue"))+
geom_line()
#Use ggplot
ggplot(df, aes(x=Date, y= Total.Renewable.Energy))+
geom_line()
#Use ggplot
ggplot(df, aes(x=Date, y= Total.Renewable.Energy))+
geom_line()+
geom_line(aes(x=Date, y= Detrend, color = "green"))+
geom_line(aes(x=Date, y= Diffy, color="blue"))
#Use ggplot
ggplot(df, aes(x=Date, y= Total.Renewable.Energy))+
geom_line()+
geom_line(aes(x=Date, y= Detrend), color = "green")+
geom_line(aes(x=Date, y= Diffy), color="blue")
?pivot_longer
df_longer<- pivot_longer(df, cols = c("Total.Renewable.Energy", "Detrend", "Diffy"))
View(df_longer)
ggplot(df)+
geom_line(aes(x=Date, y=value, color=name))
ggplot(df_longer)+
geom_line(aes(x=Date, y=value, color=name))
#Use ggplot
ggplot(df_longer)+
geom_line(aes(x=Date, y=value, color=name))+
theme_bw()
View(df)
#Compare ACFs
ts_df<- ts(df[,2:4], frequency = 12, start = c(1973, 2))
for (i in 2:4){
par(mfrow=c(1,3))
Acf(ts_df[,i], lag.max = 40, ylim=c(-0.5,1),
main = paste0(" ACF"))
}
View(ts_df)
for (i in 1:3){
par(mfrow=c(1,3))
Acf(ts_df[,i], lag.max = 40, ylim=c(-0.5,1),
main = paste0(" ACF"))
}
for (i in 1:3){
Acf(ts_df[,i], lag.max = 40, ylim=c(-0.5,1))
}
for (i in 1:3){
Acf(ts_df[,i], lag.max = 40, ylim=c(-0.5,1))
}
name = colnames(ts_df)
for (i in 1:3){
Acf(ts_df[,i], lag.max = 40, ylim=c(-0.5,1), main=name[i])
}
smktest<- SeasonalMannKendall(ts_df[,1])
View(smktest)
print(summary(smktest))
?SeasonalMannKendall
adftest<- adf.test(ts_df[,1],alternative = "stationary")
print(adftest)
par(mfrow=c(1,2))
plot(detrend_TRE, type ="l")
plot(diffy_tot_renewable_energy, type = "l")
TREP_matrix <- matrix(ts_df[,1],byrow=FALSE,nrow=12)
?byrow
??byrow
View(Tot_renewable_energy)
ts_TREP<- ts(table_10.1[,2], frequency = 12, start =c(1973,2))
TREP_matrix <- matrix(ts_TREP[,1],byrow=FALSE,nrow=12)
View(TREP_matrix)
TREP_matrix <- matrix(ts_TREP,byrow=FALSE,nrow=12)
knitr::opts_chunk$set(echo = TRUE,tidy.opts=list(width.cutoff=80), tidy=FALSE)
iHP=1
#Group data in yearly steps instances
inflow_data_matrix <- matrix(ts_inflow_data[,iHP],byrow=FALSE,nrow=12)
library(lubridate)
library(ggplot2)
library(forecast)
library(Kendall)
library(tseries)
#Importing time series data from text file#
raw_inflow_data <- read.table(file="./Data/inflowtimeseries.txt",header=FALSE,skip=0)
#Importing time series data from text file#
raw_inflow_data <- read.table(file="../Data/inflowtimeseries.txt",header=FALSE,skip=0)
#Trim the table to include only columns you need
nhydro <- ncol(raw_inflow_data)-2
nobs <- nrow(raw_inflow_data)
#If your file does not have header like this one you can add column names after
#creating the data frame
colnames(raw_inflow_data)=c("Month","Year", "HP1", "HP2","HP3","HP4", "HP5",
"HP6","HP7", "HP8","HP9","HP10", "HP11","HP12",
"HP13", "HP14","HP15")
#Checking data
head(raw_inflow_data)
str(raw_inflow_data)
#using package lubridate
my_date <- paste(raw_inflow_data[,1],raw_inflow_data[,2],sep="-")
my_date <- my(my_date)  #function my from package lubridate
head(my_date)
#add that to inflow_data and store in a new data frame
inflow_data <- cbind(my_date,raw_inflow_data[,3:(3+nhydro-1)])
head(inflow_data)
#using package ggplot2
for(i in 1:nhydro){
print(ggplot(inflow_data, aes(x=my_date, y=inflow_data[,(1+i)])) +
geom_line(color="blue") +
ylab(paste0("Inflow ",colnames(inflow_data)[(1+i)],sep=""))
)
}
#check the final obs on data
tail(inflow_data)
#Remove last for rows by replacing current data frame
inflow_data <- inflow_data[1:(nobs-12),]
#update object with number of observations
nobs <- nobs-12
#Tail again to check if the rows were correctly removed
tail(inflow_data)
ts_inflow_data <- ts(inflow_data[,2:(2+nhydro-1)],frequency=12)
#note that we are only transforming columns with inflow data, not the date columns  #start=my_date[1],end=my_date[nobs],
head(ts_inflow_data,15)
#Acf and Pacf for HP1
for(i in 1:nhydro){
par(mfrow=c(1,2))  #place plot side by side
Acf(ts_inflow_data[,i],lag.max=40,main=paste("Inflows HP",i,sep=""))
# because I am not storing Acf() into any object, I don't need to specify plot=TRUE
Pacf(ts_inflow_data[,i],lag.max=40,main=paste("Inflows HP",i,sep=""))
}
ts_inflow_data <- as.ts(ts_inflow_data[1:960,])
my_date <- my_date[1:960]
#create new df
inflow_data_new <- cbind(my_date, ts_inflow_data)
#note that there are more elegant ways to do that using filter function from package dplyr
#Let me know if you would like to learn how to use them
View(Tot_renewable_energy)
ts_TREP<- ts(table_10.1[,2], frequency = 12, start =c(1973,2), end = c(2022,2))
TREP_matrix <- matrix(ts_TREP,byrow=FALSE,nrow=12)
ts_TREP<- ts(table_10.1[,2], frequency = 12, start =c(1973,2), end = c(2022,3))
ts_TREP
TREP_matrix <- matrix(ts_TREP,byrow=FALSE,nrow=12)
View(TREP_matrix)
View(inflow_data)
ts_TREP<- ts(table_10.1[,2], frequency = 12, start =c(1973,2), end = c(2022,2))
View(ts_inflow_data)
View(ts_df)
View(ts_inflow_data)
View(df)
ts_df<- ts(ts_df[1:588,])
View(ts_df)
View(ts_df)
TREP_matrix <- matrix(ts_df[1],byrow=FALSE,nrow=12)
#Group data in yearly steps instances
inflow_data_matrix <- matrix(ts_inflow_data[,iHP],byrow=FALSE,nrow=12)
View(inflow_data_matrix)
View(ts_inflow_data)
TREP_matrix <- matrix(ts_df[,1],byrow=FALSE,nrow=12)
View(ts_df)
ts_TREP<- ts(table_10.1[,2], frequency = 12, start =c(1973,2), end = c(2022,1))
TREP_matrix <- matrix(ts_TREP,byrow=FALSE,nrow=12)
View(table_10.1)
ts_TREP<- ts(table_10.1[,5], frequency = 12, start =c(1973,2), end = c(2022,1))
TREP_matrix <- matrix(ts_TREP,byrow=FALSE,nrow=12)
ts_TREP<- ts(table_10.1[,5], frequency = 12, start =c(1973,1), end = c(2021,12))
TREP_matrix <- matrix(ts_TREP,byrow=FALSE,nrow=12)
TREP_yearly<- colMeans(TREP_matrix)
TREP_yearly
print(summary(MannKendall(TREP_yearly)))
library(dplyr)  #move this to package chunk later
my_year <- c(year(first(my_date)):year(last(my_date)))
View(table_10.1)
my_year<- [1973:2021]
my_year<- c(1973:2021)
sp_rho=cor(TREP_yearly,my_year,method="spearman")
print(sp_rho)
print(adf.test(TREP_yearly, alternative = "stationary"))
print(summary(MannKendall(TREP_yearly)))
print(sp_rho)
print(adf.test(TREP_yearly, alternative = "stationary"))
adftest<- adf.test(ts_df[,1],alternative = "stationary")
print(adftest)
print(summary(MannKendall(TREP_yearly)))
diffy_tot_renewable_energy<- diff(Tot_renewable_energy$Total.Renewable.Energy.Production, lag = 1, differences = 1)
plot(diffy_tot_renewable_energy, type = "l")
par(mfrow=c(1,2))
plot(detrend_TRE, type ="l")
plot(diffy_tot_renewable_energy, type = "l")
df_longer<- pivot_longer(df, cols = c("Total.Renewable.Energy", "Detrend", "Diffy"))
#Use ggplot
ggplot(df_longer)+
geom_line(aes(x=Date, y=value, color=name))+
theme_bw()
Acf(ts_df[,i], lag.max = 40, ylim=c(-0.5,1), main=name[i])
for (i in 1:3){
Acf(ts_df[,i], lag.max = 40, ylim=c(-0.5,1), main=name[i])
}
for (i in 1:3){
par(mfrow=c(1,3))
Acf(ts_df[,i], lag.max = 40, ylim=c(-0.5,1), main=name[i])
}
for (i in 1:3){
Acf(ts_df[,i], lag.max = 40, ylim=c(-0.5,1), main=name[i])
}
#Use ggplot
ggplot(df_longer)+
geom_line(aes(x=Date, y=value, color=name))+
theme_bw()
for (i in 1:3){
Acf(ts_df[,i], lag.max = 40, ylim=c(-0.5,1), main=name[i])
}
par(mfrow=c(1,2))
plot(detrend_TRE, type ="l")
plot(diffy_tot_renewable_energy, type = "l")
for (i in 1:3){
Acf(ts_df[,i], lag.max = 40, ylim=c(-0.5,1), main=name[i])
}
par(mfrow=c(1,3))
for (i in 1:3){
Acf(ts_df[,i], lag.max = 40, ylim=c(-0.5,1), main=name[i])
}
par(mfrow=c(1,2))
plot(detrend_TRE, type ="l")
plot(diffy_tot_renewable_energy, type = "l")
#Use ggplot
ggplot(df_longer)+
geom_line(aes(x=Date, y=value, color=name))+
theme_bw()
library(ggplot2)
#Use ggplot
ggplot(df_longer)+
geom_line(aes(x=Date, y=value, color=name))+
theme_bw()
for (i in 1:3){
Acf(ts_df[,i], lag.max = 40, ylim=c(-0.5,1), main=name[i])
}
#Load/install required package here
library(readxl)
library(ggplot2)
library(forecast)
library(tseries)
library(Kendall)
library(lubridate)
library(tidyverse)
for (i in 1:3){
Acf(ts_df[,i], lag.max = 40, ylim=c(-0.5,1), main=name[i])
}
par(mfrow=c(1,3))
for (i in 1:3){
Acf(ts_df[,i], lag.max = 40, ylim=c(-0.5,1), main=name[i])
}
smktest<- SeasonalMannKendall(ts_df[,1])
print(summary(smktest))
